<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nodejs学习</title>
    <url>/2020/11/06/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>web服务: express, koa, hapi<br>模板引擎: handlebars, ejs, jade<br>前端打包: webpak, fis,<br>任务管理: gulp<br>单元测试: karma, mocha, jasmine<br>包管理器: npm, cnpm, yarn<br>守护进程: pm2</p>
<a id="more"></a>

<h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm init </span><br></pre></td></tr></table></figure>

<h6 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装但不写入package.json； </span></span><br><span class="line"><span class="variable">$</span> npm install xxx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;dependencies&quot;中；</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –S </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;evDependencies&quot;中;</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –D</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>S（等同于–save）表示项目打包时会将该依赖包一并打包；-D（等同于–save-dev）表示该依赖包仅在开发环境下使用，正式打包不会加到项目中。</p>
<h5 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h5><h6 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npx express<span class="literal">-generator</span> -<span class="literal">-view</span>=ejs 项目名字</span><br></pre></td></tr></table></figure>

<h6 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> nmp i</span><br></pre></td></tr></table></figure>

<h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><ul>
<li><p>bin: 启动目录 里面包含了一个启动文件 www 默认监听端口是 3000 (不用)</p>
</li>
<li><p>node_modules: 所有安装的依赖模块 都在这个文件夹里面</p>
</li>
<li><p>public: 所有的前端静态资源 html css image js</p>
</li>
<li><p>routes: 放的是 路由 文件 (默认有两个)路由主要定义 url 和 资源 的映射关系 ( 一一对应关系 )主要用来接收前端发送的请求 响应数据给前端</p>
</li>
<li><p>views: 主要放置 ejs 后端模板文件</p>
</li>
<li><p>app.js: 入口文件(主文件) 总路由 (其他的路由 要由它来分配)</p>
</li>
<li><p>package.json: 包描述文件 最重要的是 依赖的模板列表 dependencies</p>
</li>
</ul>
<h6 id="app-js文件"><a href="#app-js文件" class="headerlink" title="app.js文件"></a>app.js文件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);<span class="comment">//引入路由文件</span></span><br><span class="line"><span class="keyword">var</span> app = express(); <span class="comment">//创建服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置服务器模板渲染引擎</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">&#x27;dev&#x27;</span>)); <span class="comment">//设置日为开发者模式</span></span><br><span class="line"></span><br><span class="line">app.use(express.json()); <span class="comment">//让express处理 json 数据</span></span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">//用于接收 POSt 请求数据</span></span><br><span class="line"></span><br><span class="line">app.use(cookieParser()); <span class="comment">//处理 cookie 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源设置；__dirnam代表当前文件的路径</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>))); </span><br><span class="line"><span class="comment">//路由(API)</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br></pre></td></tr></table></figure>

<h5 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h5><h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm i mysql -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myConnection = mysql.createConnection(&#123;</span><br><span class="line">    host:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    user:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    database:<span class="string">&#x27;guoxinan&#x27;</span>,</span><br><span class="line">    port:<span class="number">3306</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">sql,option,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//打开连接</span></span><br><span class="line">    myConnection.connect();</span><br><span class="line">    <span class="comment">//sql操作</span></span><br><span class="line">    myConnection.query(sql,option,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;操作数据库失败&quot;</span>,err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;);</span><br><span class="line">    myConnection.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MYSQL：ER_NOT_SUPPORTED_AUTH_MODE:Client does not support authentication protocol</span><br></pre></td></tr></table></figure>

<p>原因:8.0mysql引入了caching_sha2_password模块作为默认身份验证插件，nodejs还没有跟进</p>
<p>解决办法:进入mysql修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;自己的密码&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h5><p>JS 是单线程运行的，只能执行完一个任务，然后再去执行下一个任务。</p>
<p>异步编程不进入主线程，而是进入任务队列，当满足触发条件之后，才可以在任务队列中执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; 宏任务</span><br><span class="line">宏任务优先级是低于微任务的，主要包含：script、setTimeout、setInterval 等</span><br><span class="line"></span><br><span class="line">&gt;&gt; 微任务</span><br><span class="line">包括 Promise 的 then 、process.nextTick 等。</span><br><span class="line"></span><br><span class="line">&gt;&gt; Event Loop 执行顺序：</span><br><span class="line">* 遇到同步代码，直接执行，</span><br><span class="line">* 遇到宏任务直接放到宏任务队列中，</span><br><span class="line">* 遇到 Promise 直接执行，然后遇到 then，放入微任务队列，</span><br><span class="line">* 本轮循环结束时，先查看微任务队列，执行所有的微任务，</span><br><span class="line">* 下一次环循时，先执行一个宏任务，</span><br><span class="line"></span><br><span class="line">注意：微任务是每次全部执行，宏任务是每次只执行一项。</span><br></pre></td></tr></table></figure>

<h5 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h5><p>ECMAscript 6 原生提供了 Promise 对象.属于异步编程的一种解决方案</p>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>
<h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ol>
<li>主要用于异步计算</li>
<li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</li>
<li>可以在对象之间传递和操作promise，帮助我们处理队列</li>
</ol>
<h6 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h6><ul>
<li>Pending Promise 对象创建时的初始状态</li>
<li>Fulfilled 成功状态</li>
<li>Rejected 失败状态</li>
</ul>
<h6 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                    <span class="function"><span class="title">if</span>(<span class="params">失败</span>)</span> &#123;</span><br><span class="line">                        reject();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="title">if</span>(<span class="params">成功</span>)</span> &#123;</span><br><span class="line">                        resolve()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">// 执行成功相应的代码</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">// 捕获错误</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h6 id="Promose-all"><a href="#Promose-all" class="headerlink" title="Promose.all()"></a>Promose.all()</h6><p>主要解决并发请求的问题,参数是一个数组,数组中每个元素都是promise,一个执行失败则全部失败,必须所有的执行成功才会成功.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">    .all([promise1,promise2,promise3])</span><br></pre></td></tr></table></figure>

<h6 id="async-await-终极解决方案"><a href="#async-await-终极解决方案" class="headerlink" title="async/await(终极解决方案)"></a>async/await(终极解决方案)</h6><p>基于promise的一个解决一部的方案</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123; <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([p1,p2,p3])</span><br><span class="line"> 		<span class="built_in">console</span>.log(result);<span class="comment">//promise1 promise2 promise3</span></span><br><span class="line">   &#125; <span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;执行失败&quot;</span>,err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建与部署</title>
    <url>/2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Hexo博客搭建与部署"><a href="#Hexo博客搭建与部署" class="headerlink" title="Hexo博客搭建与部署"></a>Hexo博客搭建与部署</h2><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <span class="exturl" data-url="aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=">Markdown<i class="fa fa-external-link-alt"></i></span>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><ul>
<li><span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcv">Node.js<i class="fa fa-external-link-alt"></i></span> </li>
<li><span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tLw==">Git<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<p>安装好之后使用$ hexo -v可查看安装成功与否,具体查看<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install <span class="comment">#d安装依赖</span></span></span><br></pre></td></tr></table></figure>

<p>安装完成后博客文件放在source/_posts文件夹中</p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>hexo项目结构安装好后，_config.yml可配置相关内容,可以选择自己喜欢的主题，可到官网或者github下载<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">NexT主题官网文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>Hexo 提供了快速方便的一键部署功能</p>
<p>1.首先在github创建一个和你用户名相同的仓库，后面加上.github.io，也就是xxxx.github.io</p>
<p>2.安装 hexo-deployer-git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>

<p>3.修改配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git #仓库地址</span><br><span class="line">  branch: master #分支名</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<p>4.部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p>hexo部署到github上面的只是生成的静态文件,当换一台电脑时就无法更新博客了,所以在仓库中创建一个hexo分支来保存hexo的环境文件</p>
<p>1.xxx.github.io.git创建一个分支hexo,将此分支设置为默认分支</p>
<p>2.创建一个空文件夹将xxx.github.io.git通过git克隆到本地,然后将.git文件移动到hexo init 的文件下,此时相当于将hexo 文件夹与github上的hexo分支关联起来</p>
<p>3.执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;environment&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure>

<p>将远程hexo分支中的静态文件替换为当前目录下的环境文件(因为.gitignore文件中忽略了静态文件,所以上传上去的只是环境文件,不会包含静态文件)</p>
<p>4.每次更新文章过后使用hexo命名更新文章,使用git命令更新环境文件,在换电脑之后只需要从git克隆下就能继续更新博客了</p>
<h4 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h4><p>部署到git之后会发现访问会很慢,有时候甚至直接无法访问,所以再到gitee再部署一个,因为再github已经部署过一次了,所以再gitee可以直接把github导过来</p>
<p>1.gitee再新建仓库的时候一个从github导入仓库的选项,可以直接从github将部署好的文件直接导过来</p>
<p>2.导入过来之后将仓库名改为与用户名相同</p>
<p>3.与github不同,gitee需要自己手动开启Pages服务,在仓库的服务选项选择Gitee Pages,选择部署分支mater,点击部署,成功后上面会显示已开启 Gitee Pages 服务，网站地址:<span class="exturl" data-url="aHR0cHM6Ly94eHguZ2l0LmlvLw==">https://xxx.git.io<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153519.png"></p>
<p>4.更新文章之后,想在gitee也同步更新,可以点击仓库名旁边的箭头,可直接从github同步到gitee</p>
<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>Markdown文档中是能够存放图片路径显示图片的,上传到网络上之后可以使用图床实现,因为github访问困难,所以图床文件放在gitee</p>
<p>1.下载PicGo,安装gitee插件</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153403.png"></p>
<p>2.在gitee创建库并设置Gitee插件,然后就能直接上传图片到gitee里面,使用的时候直接用图片的网络地址</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SpringSecurity进行权限控制</title>
    <url>/2020/11/09/%E4%BD%BF%E7%94%A8SpringSecurity%E8%BF%9B%E8%A1%8C%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h3 id="spring-security-简介"><a href="#spring-security-简介" class="headerlink" title="spring security 简介"></a>spring security 简介</h3><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它是用于保护基于Spring的应用程序的实际标准。</p>
<p>Spring Security是一个框架，致力于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring Security的真正强大之处在于可以轻松扩展以满足自定义要求</p>
<a id="more"></a>

<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201109124625.png" alt="SpringSecurity的执行流程"></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201109163442.png"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置xml"><a href="#配置xml" class="headerlink" title="配置xml"></a>配置xml</h4><p>SpringSecurity使用的是过滤器Filter而不是拦截器Interceptor,意味着SpringSecurity能够管理的不仅仅是SpringMVC中的handler请求,还包含Web应用中的所有请求,包括静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFileterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFileterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>filter-name中的名字必须是springSecurityFileterChain才能加载到ioc容器中的Filter</p>
<h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringSecurity 对 Web 应用进行权限管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringSecurity 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringSecurity 标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>创建配置类,继承WebSecurityConfigurerAdapter 并重写configure方法,并加入到IOC容器(Spring ioc拦截Service和Mapper,SpringMvc ioc 拦截请求,加在Springmvc时会发生No bean named ‘springSecurityFilterChain’ available错误)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableWebMvcSecurity注解：在Spring 4.0中已弃用。</p>
<p>WebSecurityConfigurerAdapter类：可以通过重载该类的三个configure()方法来制定Web安全的细节。</p>
<h5 id="configure-WebSecurity-："><a href="#configure-WebSecurity-：" class="headerlink" title="configure(WebSecurity)："></a>configure(WebSecurity)：</h5><p>通过重载该方法，可配置Spring Security的Filter链。</p>
<h5 id="拦截配置-HttpSecurity-："><a href="#拦截配置-HttpSecurity-：" class="headerlink" title="拦截配置(HttpSecurity)："></a>拦截配置(HttpSecurity)：</h5><p>通过重载该方法，可配置如何通过拦截器保护请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()	<span class="comment">//对请求进行授权</span></span><br><span class="line">            <span class="comment">//访问&quot;/&quot;和&quot;/home&quot;路径的请求都允许</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            <span class="comment">//而其他的请求都需要认证</span></span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">//修改Spring Security默认的登陆界面</span></span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/to/login/page.html&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/do/login.html&quot;</span>)</span><br><span class="line">            .permitAll()			<span class="comment">//无条件访问</span></span><br><span class="line">            .antMathers(url)		<span class="comment">//对url设置访问要求</span></span><br><span class="line">            .hasRole()				<span class="comment">//要求用户具备的角色</span></span><br><span class="line">            .usernameParameter(<span class="string">&quot;loginAcct&quot;</span>)</span><br><span class="line">            .passwordParameter(<span class="string">&quot;userPwd&quot;</span>)</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/to/main/page.html&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .logout()	</span><br><span class="line">            .logoutUrl(<span class="string">&quot;/do/logout.html&quot;</span>)</span><br><span class="line">            .exceptionHandling()	<span class="comment">//指定异常处理器</span></span><br><span class="line"><span class="comment">//            .accessDeniedPage(&quot;/to/error/page.html&quot;)	//访问被拒时去的页面</span></span><br><span class="line">            .accessDeniedHandler(<span class="keyword">new</span> AccessDeniedHandler()) <span class="comment">//定制异常处理</span></span><br><span class="line">			.rememberMe()   <span class="comment">//默认参数remember-me(cookie)</span></span><br><span class="line">	</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>access(String)</td>
<td align="left">如果给定的SpEL表达式计算结果为true，就允许访问</td>
</tr>
<tr>
<td>anonymous()</td>
<td align="left">允许匿名用户访问</td>
</tr>
<tr>
<td>authenticated()</td>
<td align="left">允许认证过的用户访问</td>
</tr>
<tr>
<td>denyAll()</td>
<td align="left">无条件拒绝所有访问</td>
</tr>
<tr>
<td>fullyAuthenticated()</td>
<td align="left">如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问</td>
</tr>
<tr>
<td>hasAnyAuthority(String…)</td>
<td align="left">如果用户具备给定权限中的某一个的话，就允许访问</td>
</tr>
<tr>
<td>hasAnyRole(String…)</td>
<td align="left">如果用户具备给定角色中的某一个的话，就允许访问</td>
</tr>
<tr>
<td><strong>hasAuthority(String)</strong></td>
<td align="left"><strong>如果用户具备给定权限的话，就允许访问</strong></td>
</tr>
<tr>
<td>hasIpAddress(String)</td>
<td align="left">如果请求来自给定IP地址的话，就允许访问</td>
</tr>
<tr>
<td><strong>hasRole(String)</strong></td>
<td align="left"><strong>如果用户具备给定角色的话，就允许访问</strong></td>
</tr>
<tr>
<td>not()</td>
<td align="left">对其他访问方法的结果求反</td>
</tr>
<tr>
<td>permitAll()</td>
<td align="left">无条件允许访问</td>
</tr>
<tr>
<td>rememberMe()</td>
<td align="left">如果用户是通过Remember-me功能认证的，就允许访问</td>
</tr>
<tr>
<td>usernameParameter()</td>
<td align="left">定制登录账号请求参数名</td>
</tr>
<tr>
<td>passwordParameter()</td>
<td align="left">定制登录密码请求参数名</td>
</tr>
<tr>
<td>defaultSuccessUrl()</td>
<td align="left">登录成功后去往的页面</td>
</tr>
<tr>
<td>loginProcessingUrl()</td>
<td align="left">登录放行</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>安全表达式</th>
<th>计算结果</th>
</tr>
</thead>
<tbody><tr>
<td>authentication</td>
<td>用户认证对象</td>
</tr>
<tr>
<td>denyAll</td>
<td>结果始终为false</td>
</tr>
<tr>
<td>hasAnyRole(list of roles)</td>
<td>如果用户被授权指定的任意权限，结果为true</td>
</tr>
<tr>
<td>hasRole(role)</td>
<td>如果用户被授予了指定的权限，结果 为true</td>
</tr>
<tr>
<td>hasIpAddress(IP Adress)</td>
<td>用户地址</td>
</tr>
<tr>
<td>isAnonymous()</td>
<td>是否为匿名用户</td>
</tr>
<tr>
<td>isAuthenticated()</td>
<td>不是匿名用户</td>
</tr>
<tr>
<td>isFullyAuthenticated</td>
<td>不是匿名也不是remember-me认证</td>
</tr>
<tr>
<td>isRemberMe()</td>
<td>remember-me认证</td>
</tr>
<tr>
<td>permitAll</td>
<td>始终true</td>
</tr>
<tr>
<td>principal</td>
<td>用户主要信息对象</td>
</tr>
</tbody></table>
<h5 id="用户权限配置-AuthenticationManagerBuilder-："><a href="#用户权限配置-AuthenticationManagerBuilder-：" class="headerlink" title="用户权限配置(AuthenticationManagerBuilder)："></a>用户权限配置(AuthenticationManagerBuilder)：</h5><p>通过重载该方法，可配置user-detail（用户详细信息）服务。 </p>
<h6 id="在内存中装配角色-权限信息"><a href="#在内存中装配角色-权限信息" class="headerlink" title="在内存中装配角色,权限信息"></a>在内存中装配角色,权限信息</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.inMemoryAuthentication()</span><br><span class="line">           .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">           .withUser(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">           .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">           .roles(<span class="string">&quot;ADMIN&quot;</span>)	<span class="comment">//设置角色</span></span><br><span class="line">           .and()</span><br><span class="line">           .withUser(<span class="string">&quot;qwe&quot;</span>)</span><br><span class="line">           .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">           .authorities(<span class="string">&quot;UPDATE&quot;</span>);	<span class="comment">//设置权限</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><em>注意:SpringSecurity会在角色字符串前面加”ROLE”前缀,从数据库查询得到的用户信息,角色信息,权限信息需要之际手动组装,组装时同样要在角色字符串前面加”ROLE_”</em></p>
<h6 id="根据表单提交的用户名从数据库查询User对象-并装配角色-权限信息"><a href="#根据表单提交的用户名从数据库查询User对象-并装配角色-权限信息" class="headerlink" title="根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息"></a>根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息</h6><p>思路:</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110162503.png" alt="根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息"></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110162818.png"></p>
<p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.数据库查询admin对象</span></span><br><span class="line">        Admin admin = AdminMapper.select....byName();</span><br><span class="line">        <span class="comment">//2.给admin设置角色权限信息</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;UPDATE&quot;</span>));</span><br><span class="line">        <span class="comment">//3.把admin对象和authorities封装到UserDetails中</span></span><br><span class="line">        String password = admin.getPassword();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,password,authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>	</span><br><span class="line">MyUserDetailsService myUserDetailsService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.userDetailsService(myUserDetailsService)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">accountExpired(boolean)</td>
<td align="left">定义账号是否已经过期</td>
</tr>
<tr>
<td align="left">accountLocked(boolean)</td>
<td align="left">定义账号是否已经锁定</td>
</tr>
<tr>
<td align="left">and()</td>
<td align="left">用来连接配置</td>
</tr>
<tr>
<td align="left">authorities(GrantedAuthority…)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">authorities(List)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">authorities(String…)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">credentialsExpired(boolean)</td>
<td align="left">定义凭证是否已经过期</td>
</tr>
<tr>
<td align="left">disabled(boolean)</td>
<td align="left">定义账号是否已被禁用</td>
</tr>
<tr>
<td align="left">password(String)</td>
<td align="left">定义用户的密码</td>
</tr>
<tr>
<td align="left">roles(String…)</td>
<td align="left">授予某个用户一项或多项角色</td>
</tr>
<tr>
<td align="left">inMemoryAuthentication()</td>
<td align="left">在内存中完成账号密码检测</td>
</tr>
<tr>
<td align="left">withUser()</td>
<td align="left">定义账号</td>
</tr>
</tbody></table>
<h5 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h5><p>用来生成token防止跨站请求伪造,需要在表单添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者配置HttpSecurity禁用否则会发生403错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.csrf()</span><br><span class="line">	.disable();</span><br></pre></td></tr></table></figure>

<h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><p> 在configure(AuthenticationManagerBuilder auth) 中使用PasswordEncoder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>	</span><br><span class="line">MyUserDetailsService myUserDetailsService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.userDetailsService(myUserDetailsService)</span><br><span class="line">           .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>自定义加密方式可继承PasswordEncoder,重写encode(),matches()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密密码</span></span><br><span class="line">        <span class="keyword">return</span> MyEncoder(charSequence);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String encodedPassword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密明文密码</span></span><br><span class="line">        String formPassword = MyEncoder(charSequence);</span><br><span class="line">        <span class="comment">//数据库密码</span></span><br><span class="line">        String databasePassword = encodedPassword;</span><br><span class="line">        <span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">return</span> Objects.equals(formPassword,databasePassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="No-bean-named-‘springSecurityFilterChain’-available"><a href="#No-bean-named-‘springSecurityFilterChain’-available" class="headerlink" title="No bean named ‘springSecurityFilterChain’ available:"></a>No bean named ‘springSecurityFilterChain’ available:</h5><p>当SpringSecurity配置类添加到SpringMvc Ioc中时,会抛出找不到pspringSecurityFilterChain异常</p>
<h6 id="三大组件启动顺序"><a href="#三大组件启动顺序" class="headerlink" title="三大组件启动顺序:"></a>三大组件启动顺序:</h6><p>首先:ContextLoaderListener初始化,创建Spring的IOC容器</p>
<p>其次:DelegatingFilterProxy初始化,查找IOC容器,查找bean</p>
<p>最后:DispatherServlet初始化,创建SpringMVC的IOC容器</p>
<h6 id="Filter查找IOC容器然后找Bean的工作机制"><a href="#Filter查找IOC容器然后找Bean的工作机制" class="headerlink" title="Filter查找IOC容器然后找Bean的工作机制"></a>Filter查找IOC容器然后找Bean的工作机制</h6><p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110111808.png"></p>
<h6 id="解决方案一-把两个ioc容器合二为一"><a href="#解决方案一-把两个ioc容器合二为一" class="headerlink" title="解决方案一:把两个ioc容器合二为一"></a>解决方案一:把两个ioc容器合二为一</h6><p>不使用ContextLoaderListener,让Dispater加载所有Spring配置文件,但是会破环现有程序结构</p>
<h6 id="解决方案二-改源码"><a href="#解决方案二-改源码" class="headerlink" title="解决方案二:改源码"></a>解决方案二:改源码</h6><p>修改DelegatingFilterProxy类的initFilterBean(),doFilter()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.delegateMonitor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If no target bean name specified, use filter name.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.targetBeanName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.targetBeanName = getFilterName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Fetch Spring root application context and initialize the delegate early,</span></span><br><span class="line">            <span class="comment">// if possible. If the root application context will be started after this</span></span><br><span class="line">            <span class="comment">// filter proxy, we&#x27;ll have to resort to lazy initialization.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*注释掉</span></span><br><span class="line"><span class="comment">                WebApplicationContext wac = findWebApplicationContext();</span></span><br><span class="line"><span class="comment">                if (wac != null) &#123;</span></span><br><span class="line"><span class="comment">                    this.delegate = initDelegate(wac);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">// Lazily initialize the delegate if necessary.</span></span><br><span class="line">	Filter delegateToUse = <span class="keyword">this</span>.delegate;</span><br><span class="line">	<span class="keyword">if</span> (delegateToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.delegateMonitor) &#123;</span><br><span class="line">			delegateToUse = <span class="keyword">this</span>.delegate;</span><br><span class="line">			<span class="keyword">if</span> (delegateToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">//把原来查找IOC容器的代码注释掉,按需要重新编写</span></span><br><span class="line">				<span class="comment">//WebApplicationContext wac = findWebApplicationContext();</span></span><br><span class="line">                   <span class="comment">//1.获取ServletContext对象</span></span><br><span class="line">                   ServletContext sc = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">                   <span class="comment">//2.拼接SpingMvc将Ioc容器存入ServletContext域的时候使用的属性名</span></span><br><span class="line">                   String servletName = <span class="string">&quot;springDispatherServlet&quot;</span>;</span><br><span class="line">                   String attrName = FrameworkServlet.SERVLET_CONTEXT_PREFIX+servletName;</span><br><span class="line">                   <span class="comment">//3.根据attrName从ServletCOntext域中获取IOC容器对象</span></span><br><span class="line">                   WebApplicationContext wac = (WebApplicationContext)sc.getAttribute(attrName)</span><br><span class="line">				<span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No WebApplicationContext found: &quot;</span> +</span><br><span class="line">							<span class="string">&quot;no ContextLoaderListener or DispatcherServlet registered?&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				delegateToUse = initDelegate(wac);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.delegate = delegateToUse;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Cannot-pass-a-pull-GrantedAuthorrity-collection"><a href="#Cannot-pass-a-pull-GrantedAuthorrity-collection" class="headerlink" title="Cannot pass a pull GrantedAuthorrity collection:"></a>Cannot pass a pull GrantedAuthorrity collection:</h5><p>没有设置roles()或者authorities方法导致的</p>
<h5 id="Spring-Security-登陆报错："><a href="#Spring-Security-登陆报错：" class="headerlink" title="Spring Security 登陆报错："></a>Spring Security 登陆报错：</h5><p>There is no PasswordEncoder mapped for the id “null”:</p>
<p>5.0以后对于密码的管理有些变化,现如今Spring Security中密码的存储格式是“{id}…………”。前面的id是加密方式，id可以是bcrypt、sha256等，后面跟着的是加密后的密码。也就是说，程序拿到传过来的密码的时候，会首先查找被“{”和“}”包括起来的id，来确定后面的密码是被怎么样加密的，如果找不到就认为id是null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth.passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">    .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>git&amp;Linux基本命令</title>
    <url>/2020/11/07/git-Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git和Linux的一些基本命令操作</p>
<a id="more"></a>

<h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><h6 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff readme.txt </span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span>		$ git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 1094a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>



<h6 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://.....($ git remote add origin git@github.com:michaelliao/learngit.git)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin(远程仓库名) master(本地分支名) master(远程分支名)  (-u首次建立关联)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:michaelliao/gitskills.git</span></span><br><span class="line">git remote rm origin</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin  master(本地分支名) master(远程分支名)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream-to=origin/dev dev（绑定本地分支）</span></span><br></pre></td></tr></table></figure>

<h6 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev（$ git switch -c dev）===</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev（$ git switch master）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev（not merge  -D）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase（直线提交历史）</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git stash apply(恢复不删除)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2</span></span><br></pre></td></tr></table></figure>

<h6 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag v0.9 [f52c633]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [标签名]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show v0.9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d v0.9		删除标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin v1.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --tags	推送所有标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/v0.9</span></span><br></pre></td></tr></table></figure>

<h6 id="多关联"><a href="#多关联" class="headerlink" title="多关联"></a>多关联</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h6 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.co checkout</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.ci commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.br branch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><h6 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls: 列出目录	</span><br><span class="line">cd：切换目录	(Change Directory)</span><br><span class="line">pwd：显示目前的目录	(Print Working Directory)</span><br><span class="line">mkdir：创建一个新的目录	 (make directory)</span><br><span class="line">rmdir：删除一个空的目录</span><br><span class="line">cp: 复制文件或目录</span><br><span class="line">rm: 移除文件或目录</span><br><span class="line">mv: 移动文件与目录，或修改文件与目录的名称</span><br><span class="line">dhclient 自动分配地址[BOOTPROTO&#x3D;STATIC	ONBOOT&#x3D;YES	</span><br><span class="line">IPADDR&#x3D;192.168.XX.XXX	NETMASK&#x3D;255.255.255.0 	GATEWAY&#x3D;192.168.XX.X</span><br><span class="line">DNS1&#x3D;119.29.29.29]</span><br></pre></td></tr></table></figure>

<h6 id="用户-组管理"><a href="#用户-组管理" class="headerlink" title="用户/组管理"></a>用户/组管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd [user]	useradd [-g]  组名 [user]</span><br><span class="line">passwd [user] </span><br><span class="line">userdel [-r] [user]</span><br><span class="line">id [user]</span><br><span class="line">su [user]</span><br><span class="line"></span><br><span class="line">groupadd [group]</span><br><span class="line">groupdel [group]</span><br><span class="line">gpasswd  -d student root 将用户student从root组删除</span><br><span class="line">usermod [-g] 组名 [user]</span><br></pre></td></tr></table></figure>

<h6 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [dir] | grep [..]</span><br><span class="line">ls -l /home |grep &quot;!-&quot;|wc -l 查看某文件夹下文件的个数</span><br><span class="line">stat [file]</span><br><span class="line"></span><br><span class="line">[ls,cat,echo...] &gt;&gt;追加</span><br><span class="line">[ls,cat,echo...] &gt;覆盖</span><br><span class="line"></span><br><span class="line">head/tail -n [num] [file]     		tail -f [file]</span><br><span class="line"></span><br><span class="line">ln -s [dir] [name] </span><br><span class="line"></span><br><span class="line">date &quot;+%Y %M %D.....&quot;</span><br><span class="line">cal</span><br><span class="line"></span><br><span class="line">find [scope] -name [name]</span><br><span class="line">find [scope] -user [user]</span><br><span class="line">find [scope] -size  [+-n]</span><br><span class="line"></span><br><span class="line">tar -zcvf [name].tar.gz [files] 打包</span><br><span class="line">tar -zxvf [files] -C [dir] 解压</span><br><span class="line"></span><br><span class="line">rpm [-qa | -qi | qf]</span><br><span class="line">rpm -e [--nodeps(强删)] [name]</span><br><span class="line">rpm -ivh		i=install  v=verbose提示  h=hash进度条</span><br></pre></td></tr></table></figure>

<h6 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown/chgrp [user/group] [file]</span><br><span class="line">chmod u=[rwx],g=[rwx],o=[rwx] [file]</span><br><span class="line">chmod u[+-][rwx],g[+-][rwx],o[+-][rwx] [file]</span><br><span class="line">chomd [777] [file]     (4=r,2=w,1=x)</span><br></pre></td></tr></table></figure>

<h6 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab [-e -l -r]  ([写入 查看 删除])</span><br><span class="line">*/1 * * * * [执行文件/脚本] </span><br></pre></td></tr></table></figure>

<h6 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">du -axh	文件夹占用</span><br><span class="line">lsblk -f  	查看是否已分配</span><br><span class="line">fdisk /dev/dba	分区</span><br><span class="line">mkfs -t ext4 /dev/sdb1   格式化</span><br><span class="line">mount  /dev/sdb1   /home/newdisk	挂载</span><br><span class="line">/dev/fstab  设置开机自动挂载</span><br></pre></td></tr></table></figure>

<h6 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep ...</span><br><span class="line">ps -ef 		-e显示所有进程 -f全格式</span><br><span class="line">kill [-9] 进程号	-9强制</span><br><span class="line">killall 进程名称</span><br><span class="line">top [-d | -i | -p]	-d秒数 -i不显示闲置或僵死 -p指定进程id监控</span><br></pre></td></tr></table></figure>

<h6 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl [status | stop | start | restart | reload ]firewalld</span><br><span class="line">ll /etc/init.d/	</span><br><span class="line">netstat -anp 	-an按一定顺序 -p显示哪个在调用   查看网络服务</span><br></pre></td></tr></table></figure>

<h6 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h6><pre><code>  #!/bin/bash开头
  A=100;
  unset A ---&gt;A=
位置参数变量
$n    第n个参数
$*    整体
$@    分别
$#    参数个数
=====================</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">预定义变量</span><br><span class="line"><span class="meta">$</span><span class="bash">$	当前进程PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">!	后台运行最后一个PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">?	最后一次命名的返回状态 0√</span></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line">运算(2+3)*4</span><br><span class="line"><span class="meta">#</span><span class="bash">方式一$()</span></span><br><span class="line">RESULT1=$(((2+3)*4))</span><br><span class="line"><span class="meta">#</span><span class="bash">方式二$[]  推荐方式</span></span><br><span class="line">RESULT2=$[(2+3)*4]</span><br><span class="line"><span class="meta">#</span><span class="bash">方式三 expr</span></span><br><span class="line">................</span><br><span class="line">==========================</span><br><span class="line">条件判断</span><br><span class="line">if[ condition ] </span><br><span class="line">then</span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">elif[ condirion ] </span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">fi</span><br><span class="line"> -lt小于 -le小于等于  -gt大于 -ge大于等于  -eq等于 -ne不等于</span><br><span class="line">-r/-w/-x 有读/写/执行的权限</span><br><span class="line">-f文件存在并且时一个常规文件 -e文件存在 -d文件存在并是目录</span><br><span class="line">------------------------</span><br><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">echo&quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">echo&quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo&quot;other&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">循环</span><br><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">-------------------------</span><br><span class="line">for ((i=0;i&lt;100;i++))</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">--------------------------</span><br><span class="line">while[ condition ]</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">read读取控制台输入</span><br><span class="line">read -p  &quot;读取时的提示符&quot; -t指定读取时等待的时间(秒)	NUM</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">函数</span><br><span class="line">function getSum()&#123;</span><br><span class="line">	SUM=$[$n1+$n2]</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;输入n1&quot; n1</span><br><span class="line">read -p &quot;输入n2&quot; n2</span><br><span class="line"><span class="meta">#</span><span class="bash">调用</span></span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
