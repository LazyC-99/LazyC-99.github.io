<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ActiveMQ使用</title>
    <url>/2021/07/05/ActiveMQ/</url>
    <content><![CDATA[<h4 id="ActiveMQ介绍"><a href="#ActiveMQ介绍" class="headerlink" title="ActiveMQ介绍"></a>ActiveMQ介绍</h4><p>​     MQ是消息中间件，是一种在分布式系统中应用程序借以传递消息的媒介，常用的有ActiveMQ，RabbitMQ(erlang)，kafka。ActiveMQ是Apache下的开源项目，完全支持JMS1.1和J2EE1.4规范的JMS Provider实现。</p>
<a id="more"></a>

<p>特点：<br>1、支持多种语言编写客户端<br>2、对spring的支持，很容易和spring整合<br>3、支持多种传输协议：TCP,SSL,NIO,UDP等<br>4、支持AJAX<br>消息形式：<br>1、点对点（queue）<br>2、一对多（topic）</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20210707211328.png"></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20210707211339.png"></p>
<h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><h5 id="创建连接工厂"><a href="#创建连接工厂" class="headerlink" title="创建连接工厂"></a>创建连接工厂</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;tcp://127.0.0.1:61616&quot;</span>);</span><br><span class="line">        <span class="comment">//2.通过连接工厂，获得连接并启动访问</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//3.创建会话Session(参数：事务|签收)</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列queen还是主题topic)</span></span><br><span class="line">        Queue queue = session.createQueue(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.创建消息生产者</span></span><br><span class="line">MessageProducer messageProducer = session.createProducer(queue);</span><br><span class="line"><span class="comment">//6.生产消息发送到MQ队列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">    TextMessage textMessage =session.createTextMessage(<span class="string">&quot;msg--&quot;</span>+i);</span><br><span class="line">    messageProducer.send(textMessage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">messageProducer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">System.out.printf(<span class="string">&quot;******发送完成&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.创建消息消费者</span></span><br><span class="line">MessageConsumer messageConsumer = session.createConsumer(queue);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">    TextMessage textMessage = (TextMessage) messageConsumer.receive();<span class="comment">//.receive(timeout)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span>!= textMessage)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;****消费者接收到消息：&quot;</span>+textMessage.getText());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="两种消费者方式"><a href="#两种消费者方式" class="headerlink" title="两种消费者方式"></a>两种消费者方式</h6><ul>
<li><p>同步阻塞方式（receive()）</p>
<p>订阅者或接收者调用MessageConsumer的receive()方法接收消息，receive方法在能够接收到消息之前(超时之前)将一直阻塞。</p>
</li>
<li><p>异步非阻塞方式（监听器onMessage()）</p>
<p>订阅者或接受者通过调用MessageConsumer的setMessgeLisener(MessageListener listener) 注册一个消息监听器，当消息到达之后，系统自动调用监听器MessageListener的onMessage(Message message)方法。</p>
</li>
</ul>
<h4 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h4><p>yml配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">activemq:</span></span><br><span class="line">      <span class="attr">broker-url:</span> <span class="string">tcp://127.0.0.1:61616</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">jms:</span></span><br><span class="line">      <span class="attr">pub-sub-domain:</span> <span class="literal">false</span> 		<span class="comment">#false = Queue	true = topic</span></span><br></pre></td></tr></table></figure>

<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span>  <span class="comment">//启动消息队列（启动类）</span></span><br><span class="line"><span class="comment">//@EnableJmsScheduling    //开启定投</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myqueue&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myQueue;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(myQueue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue_Produce</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;<span class="comment">//destination</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息发送</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue,<span class="string">&quot;message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//间隔定投</span></span><br><span class="line">    <span class="meta">@Scheduked(fixedDelay = 3000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> produceMsgScheduled&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue,<span class="string">&quot;message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue_Consumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;myqueue&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到消息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTY0NDExRzdhQj9wPTQ0">https://www.bilibili.com/video/BV164411G7aB?p=44<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的安装使用</title>
    <url>/2020/11/11/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<a id="more"></a>

<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ol>
<li><p>Docker要求CentOS系统内核版本高于3.10,查看CentOS内核版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uname -r</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install docker</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl start docker</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将docer设为开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker search 关键字</td>
<td align="center">检索</td>
</tr>
<tr>
<td align="center">docker pull 镜像名:tag</td>
<td align="center">拉取</td>
</tr>
<tr>
<td align="center">docker images</td>
<td align="center">查询已下载的镜像</td>
</tr>
<tr>
<td align="center">docker rmi  image-id</td>
<td align="center">删除镜像</td>
</tr>
</tbody></table>
<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker run –name container-name -d image-name||eg:docker run –name mytomcat -d tomcat:latest</td>
<td align="center">–name:自定义容器名||-d:后台运行||image-name:指定镜像模板</td>
</tr>
<tr>
<td align="center">docker ps</td>
<td align="center">查看运行中的容器||-a可以查看所有容器</td>
</tr>
<tr>
<td align="center">docer stop container -name/container-id</td>
<td align="center">停止容器</td>
</tr>
<tr>
<td align="center">docer start container -name/container-id</td>
<td align="center">启动容器</td>
</tr>
<tr>
<td align="center">docker rm container-id</td>
<td align="center">删除容器</td>
</tr>
<tr>
<td align="center">-p 6379:6379</td>
<td align="center">主机端口映射到容器端口</td>
</tr>
<tr>
<td align="center">docker logs container-name/container-id</td>
<td align="center">查看容器日志</td>
</tr>
<tr>
<td align="center">docker exec -it 容器ID /bin/bash</td>
<td align="center">进入容器</td>
</tr>
<tr>
<td align="center">exit/Ctrl+P+Q</td>
<td align="center">退出容器</td>
</tr>
</tbody></table>
<ul>
<li>启动MySQL</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysqlInstance e MYSQL_ROOT_PASSWORD=密码 -d mysql</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动Redis</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name redis -p 6379:6379 -v /docker/redis/data:/data -v /docker/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建与部署</title>
    <url>/2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Hexo博客搭建与部署"><a href="#Hexo博客搭建与部署" class="headerlink" title="Hexo博客搭建与部署"></a>Hexo博客搭建与部署</h2><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <span class="exturl" data-url="aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=">Markdown<i class="fa fa-external-link-alt"></i></span>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><ul>
<li><span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcv">Node.js<i class="fa fa-external-link-alt"></i></span> </li>
<li><span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tLw==">Git<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<p>安装好之后使用$ hexo -v可查看安装成功与否,具体查看<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install <span class="comment">#d安装依赖</span></span></span><br></pre></td></tr></table></figure>

<p>安装完成后博客文件放在source/_posts文件夹中</p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>hexo项目结构安装好后，_config.yml可配置相关内容,可以选择自己喜欢的主题，可到官网或者github下载<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">NexT主题官网文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>Hexo 提供了快速方便的一键部署功能</p>
<p>1.首先在github创建一个和你用户名相同的仓库，后面加上.github.io，也就是xxxx.github.io</p>
<p>2.安装 hexo-deployer-git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>

<p>3.修改配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git #仓库地址</span><br><span class="line">  branch: master #分支名</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<p>4.部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy		  <span class="comment">#部署</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server         <span class="comment">#运行本地服务</span></span></span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p>hexo部署到github上面的只是生成的静态文件,当换一台电脑时就无法更新博客了,所以在仓库中创建一个hexo分支来保存hexo的环境文件</p>
<p>1.xxx.github.io.git创建一个分支hexo,将此分支设置为默认分支</p>
<p>2.创建一个空文件夹将xxx.github.io.git通过git克隆到本地,然后将.git文件移动到hexo init 的文件下,此时相当于将hexo 文件夹与github上的hexo分支关联起来</p>
<p>3.执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;environment&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure>

<p>将远程hexo分支中的静态文件替换为当前目录下的环境文件(因为.gitignore文件中忽略了静态文件,所以上传上去的只是环境文件,不会包含静态文件)</p>
<p>4.每次更新文章过后使用hexo命名更新文章,使用git命令更新环境文件,在换电脑之后只需要从git克隆下就能继续更新博客了</p>
<h4 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h4><p>部署到git之后会发现访问会很慢,有时候甚至直接无法访问,所以再到gitee再部署一个,因为再github已经部署过一次了,所以再gitee可以直接把github导过来</p>
<p>1.gitee再新建仓库的时候一个从github导入仓库的选项,可以直接从github将部署好的文件直接导过来</p>
<p>2.导入过来之后将仓库名改为与用户名相同</p>
<p>3.与github不同,gitee需要自己手动开启Pages服务,在仓库的服务选项选择Gitee Pages,选择部署分支mater,点击部署,成功后上面会显示已开启 Gitee Pages 服务，网站地址:<span class="exturl" data-url="aHR0cHM6Ly94eHguZ2l0LmlvLw==">https://xxx.git.io<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153519.png"></p>
<p>4.更新文章之后,想在gitee也同步更新,可以点击仓库名旁边的箭头,可直接从github同步到gitee</p>
<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>Markdown文档中是能够存放图片路径显示图片的,上传到网络上之后可以使用图床实现,因为github访问困难,所以图床文件放在gitee</p>
<p>1.下载PicGo,安装gitee插件</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153403.png"></p>
<p>2.在gitee创建库并设置Gitee插件,然后就能直接上传图片到gitee里面,使用的时候直接用图片的网络地址</p>
<p>3.gitee插件配置示例</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20210707.png"></p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis相关使用</title>
    <url>/2020/11/13/Redis%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p>
<a id="more"></a>

<ul>
<li>基于内存运行，性能高效</li>
<li>支持分布式，理论上可以无限扩展</li>
<li>key-value存储系统</li>
<li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li>
</ul>
<h4 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul>
<li>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”，泛指非关系型的数据库。</li>
<li>NoSQL不依赖业务逻辑方式存储,而以简单的key-value模式存储,因此大大的增加了数据库的扩展能力</li>
<li>不遵循SQL标准</li>
<li>不支持ACID(原子性,一致性,独立性,持久性)</li>
<li>远超SQL的性能</li>
</ul>
<h5 id="NoSQL适用场景"><a href="#NoSQL适用场景" class="headerlink" title="NoSQL适用场景"></a>NoSQL适用场景</h5><ul>
<li>对数据的高并发读写</li>
<li>海量数据的读写</li>
<li>对数据高可扩展性的</li>
</ul>
<h5 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h5><ul>
<li>需要事务支持</li>
<li>基于sql的结构化查询存储,处理复杂的关系,需要及席查询(条件查询)</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h5><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">systemctl start redis</td>
<td align="center">启动redis</td>
</tr>
<tr>
<td align="center">systemctl stop redis</td>
<td align="center">停止redis</td>
</tr>
<tr>
<td align="center">systemctl status redis</td>
<td align="center">查看redis运行状态</td>
</tr>
<tr>
<td align="center">ps ef</td>
<td align="center">grep redis</td>
</tr>
<tr>
<td align="center">redis-cli</td>
<td align="center">开启(本机)客户端</td>
</tr>
<tr>
<td align="center">redis-cli -h 127.0.0.1 -p6379</td>
<td align="center">开启客户端</td>
</tr>
</tbody></table>
<h5 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h5><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">keys *</td>
<td align="center">查询当前库的所有键</td>
</tr>
<tr>
<td align="center">exists <key></td>
<td align="center">判断某个键是否存在</td>
</tr>
<tr>
<td align="center">type <key></td>
<td align="center">查看键的类型</td>
</tr>
<tr>
<td align="center">del  <key></td>
<td align="center">删除某个键</td>
</tr>
<tr>
<td align="center">expire <key> <seconds></td>
<td align="center">为键值设置过期的时间,单位秒</td>
</tr>
<tr>
<td align="center">ttl <key></td>
<td align="center">查看还有多少秒过期,-1表示永不过期,-2表示已过期</td>
</tr>
<tr>
<td align="center">dbsize</td>
<td align="center">查看当前数据库的key的数量</td>
</tr>
<tr>
<td align="center">Flushdb</td>
<td align="center">清空当前库</td>
</tr>
<tr>
<td align="center">Flushall</td>
<td align="center">清空所有库</td>
</tr>
</tbody></table>
<h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">get <key></td>
<td align="center">查询对应键值</td>
</tr>
<tr>
<td align="center">set <key><value></td>
<td align="center">添加键值对</td>
</tr>
<tr>
<td align="center">append <key><value></td>
<td align="center">将value最佳到指定键值末</td>
</tr>
<tr>
<td align="center">strlen <key></td>
<td align="center">获得值的长度</td>
</tr>
<tr>
<td align="center">setnx <key><value></td>
<td align="center">只有在key不存在时设置key的值</td>
</tr>
<tr>
<td align="center">incr / decr <key></td>
<td align="center">将key中存储的数字值增1/减1(只能对数字值操作,如果为空,新增值为1/-1)</td>
</tr>
<tr>
<td align="center">incrby / decrby <key> &lt;步长&gt;</td>
<td align="center">将key中存储的数字增减,自定义步长</td>
</tr>
<tr>
<td align="center">mset<key1><value1> / mget <key1> <key2></td>
<td align="center">多个添加获取</td>
</tr>
<tr>
<td align="center">getrange <key><start><end></td>
<td align="center">获取值的范围,类似java中的substring</td>
</tr>
<tr>
<td align="center">setrange <key><start><value></td>
<td align="center">用<value>覆写<key>所存储的字符串值,从<start>开始</td>
</tr>
</tbody></table>
<p> 默认16个数据库,类似数组下标从0开始,初始默认使用0号库</p>
<p>使用 select <id> 来切换数据库</p>
<h4 id="五种数据结构"><a href="#五种数据结构" class="headerlink" title="五种数据结构"></a>五种数据结构</h4><p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201204163643.png"></p>
<h5 id="1-String-字符串类型"><a href="#1-String-字符串类型" class="headerlink" title="1.String 字符串类型"></a>1.String 字符串类型</h5><p>是redis中最基本的数据类型，一个key对应一个value。</p>
<p>String类型是二进制安全的，意思是 redis 的 string 可以包含任何数据。如数字，字符串，jpg图片或者序列化的对象。</p>
<p>使用：get 、 set 、 del 、 incr、 decr 等</p>
<p>实战场景：</p>
<ol>
<li><p>缓存： 经典使用场景，把常用信息，字符串，图片或者视频等信息放到redis中，redis作为缓存层，mysql做持久化层，降低mysql的读写压力。</p>
</li>
<li><p>计数器：redis是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</p>
</li>
<li><p>session：常见方案spring session + redis实现session共享</p>
</li>
</ol>
<h5 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2.Hash"></a>2.Hash</h5><p>是一个Mapmap，指值本身又是一种键值对结构，如 value={ {field1,value1},……fieldN,valueN} }</p>
<p>使用：所有hash的命令都是 h  开头的   hget 、hset 、 hdel 等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name1 hao</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user email1 hao@163.com</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name1&quot;</span><br><span class="line">2) &quot;hao&quot;</span><br><span class="line">3) &quot;email1&quot;</span><br><span class="line">4) &quot;hao@163.com&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user user</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; hget user name1</span><br><span class="line">&quot;hao&quot;</span><br><span class="line">127.0.0.1:6379&gt; hset user name2 xiaohao</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user email2 xiaohao@163.com</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name1&quot;</span><br><span class="line">2) &quot;hao&quot;</span><br><span class="line">3) &quot;email1&quot;</span><br><span class="line">4) &quot;hao@163.com&quot;</span><br><span class="line">5) &quot;name2&quot;</span><br><span class="line">6) &quot;xiaohao&quot;</span><br><span class="line">7) &quot;email2&quot;</span><br><span class="line">8) &quot;xiaohao@163.com&quot;</span><br></pre></td></tr></table></figure>

<p>实战场景：</p>
<ol>
<li>缓存： 能直观，相比string更节省空间，的维护缓存信息，如用户信息，视频信息等。</li>
</ol>
<h5 id="3-链表"><a href="#3-链表" class="headerlink" title="3.链表"></a>3.链表</h5><p>List 说白了就是链表（redis 使用双端链表实现的 List），是有序的，value可以重复，可以通过下标取出对应的value值，左右两边都能进行插入和删除数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush mylist 1 2 ll ls mem</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;mem&quot;</span><br><span class="line">2) &quot;ls&quot;</span><br><span class="line">3) &quot;ll&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>实战场景：</p>
<p>1.timeline：例如微博的时间轴，有人发布微博，用lpush加入时间轴，展示新的列表信息。</p>
<h5 id="4-Set-集合"><a href="#4-Set-集合" class="headerlink" title="4.Set  集合"></a>4.Set  集合</h5><p>集合类型也是用来保存多个字符串的元素，但和列表不同的是集合中 </p>
<ol>
<li>不允许有重复的元素</li>
<li>集合中的元素是无序的，不能通过索引下标获取元素</li>
<li>支持集合间的操作，可以取多个集合取交集、并集、差集</li>
</ol>
<p>使用：命令都是以s开头的 sset 、srem、scard、smembers、sismember</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset hao hao1 xiaohao hao</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;xiaohao&quot;</span><br><span class="line">2) &quot;hao1&quot;</span><br><span class="line">3) &quot;hao&quot;</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset hao</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>实战场景;</p>
<ol>
<li><p>标签（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</p>
</li>
<li><p>点赞，或点踩，收藏等，可以放到set中实现</p>
</li>
</ol>
<h5 id="5-zset-有序集合"><a href="#5-zset-有序集合" class="headerlink" title="5.zset 有序集合"></a>5.zset 有序集合</h5><p>有序集合和集合有着必然的联系，保留了集合不能有重复成员的特性，区别是，有序集合中的元素是可以排序的，它给每个元素设置一个分数，作为排序的依据。</p>
<p>使用： 有序集合的命令都是 以 z 开头  zadd 、 zrange、 zscore</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myscoreset 100 hao 90 xiaohao</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myscoreset 0 -1</span><br><span class="line">1) &quot;xiaohao&quot;</span><br><span class="line">2) &quot;hao&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myscoreset hao</span><br><span class="line">&quot;100&quot;</span><br></pre></td></tr></table></figure>

<p>实战场景：</p>
<ol>
<li>排行榜：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li>
</ol>
<h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><h5 id="ip地址的绑定-bind"><a href="#ip地址的绑定-bind" class="headerlink" title="ip地址的绑定(bind)"></a>ip地址的绑定(bind)</h5><ul>
<li>默认情况下bind = 127.0.0.1只能接受本机访问,不写无限制接收任何ip访问(生产环境要写应用服务器的地址)</li>
<li>如果开启了protexted-mode,在没有设定bind ip 且没有设密码的情况下,只允许接收本机访问</li>
</ul>
<h5 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h5><ul>
<li>请求到达后至少接受进程处理前的队列</li>
<li>backlog队列总和 = 未完成三次握手队列 + 已经完成三次握手的队列</li>
<li>高并发环境tcp-backlog设置值跟超时时限内的Redis吞吐量决定</li>
</ul>
<h5 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h5><ul>
<li>一个空闲的客户端维持多少秒会关闭,0为永不关闭</li>
</ul>
<h5 id="TCP-keepalive"><a href="#TCP-keepalive" class="headerlink" title="TCP keepalive"></a>TCP keepalive</h5><ul>
<li>对访问客户端的一种心跳检测,每n秒检测一次,官方推荐为60秒</li>
</ul>
<h5 id="requirepass"><a href="#requirepass" class="headerlink" title="requirepass"></a>requirepass</h5><ul>
<li>设置永久密码</li>
</ul>
<h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h5> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;xxx.xxx.xx.xx&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">jedis.ping();</span><br><span class="line">jedus.close();</span><br></pre></td></tr></table></figure>

<h4 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul>
<li><p>Redis事务是一个单独的隔离操作: 事务中的所有命令都会序列化, 按顺序的执行,事务在执行的过程中, 不iu被其他客户端发送来的命令请求所打断</p>
</li>
<li><p>Redis事务的主要作用就是串联多个命令防止别人的命令插队</p>
</li>
</ul>
<h5 id="Multi-Exec-discard"><a href="#Multi-Exec-discard" class="headerlink" title="Multi, Exec, discard"></a>Multi, Exec, discard</h5><ul>
<li>从输入Multi命令开始, 输入的命令都会依次进入命令队列中, 但不会执行, 直到输入Exec后, Redis会将之前的命令队列中的命令依次执行.</li>
<li>组队的过程中可以通过discard来放弃组队.</li>
</ul>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201115155543.png"></p>
<h5 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h5><ul>
<li>组队中某个命令如果出现了报告错误, 执行时整个的队友队列都会被取消</li>
</ul>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201115155931.png" alt="事务的错误处理"></p>
<ul>
<li>如果执行阶段某个命令报出了错误, 则只有报错的命令不会被执行, 而其他的命令都会执行,不会回滚</li>
</ul>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201115160127.png" alt="事务的错误处理"></p>
<h5 id="WATCH-监视"><a href="#WATCH-监视" class="headerlink" title="WATCH (监视)"></a>WATCH (监视)</h5><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个)key ，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断，unwatch取消监视</p>
<h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><p>Redis提供了2个不同形式的持久化方式</p>
<h5 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h5><ul>
<li><p>在指定的时间间隔内将内存中的数据集快照(Snapshot)写入磁盘，它恢复时是将快照文件直接读到内存里。</p>
</li>
<li><p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能,如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
</li>
<li><p>RDB保存的文件在redis.conf中配置文件名称,默认为dump.rdb,保存路径也可修改</p>
</li>
<li><p>RDB的保存策略 </p>
<p>save    900    1(900秒内保存1次)</p>
</li>
</ul>
<h5 id="AOF-Append-Of-File"><a href="#AOF-Append-Of-File" class="headerlink" title="AOF(Append Of File)"></a>AOF(Append Of File)</h5><ul>
<li>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</li>
<li>AOF默认不开启, 需要在配置文件中配置  apeendonly 为 yes</li>
<li>AOF与RDB同时开启, 以AOF为准</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习</title>
    <url>/2020/11/06/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>web服务: express, koa, hapi<br>模板引擎: handlebars, ejs, jade<br>前端打包: webpak, fis,<br>任务管理: gulp<br>单元测试: karma, mocha, jasmine<br>包管理器: npm, cnpm, yarn<br>守护进程: pm2</p>
<a id="more"></a>

<h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm init </span><br></pre></td></tr></table></figure>

<h6 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装但不写入package.json； </span></span><br><span class="line"><span class="variable">$</span> npm install xxx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;dependencies&quot;中；</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –S </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;evDependencies&quot;中;</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –D</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>S（等同于–save）表示项目打包时会将该依赖包一并打包；-D（等同于–save-dev）表示该依赖包仅在开发环境下使用，正式打包不会加到项目中。</p>
<h5 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h5><h6 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npx express<span class="literal">-generator</span> -<span class="literal">-view</span>=ejs 项目名字</span><br></pre></td></tr></table></figure>

<h6 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> nmp i</span><br></pre></td></tr></table></figure>

<h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><ul>
<li><p>bin: 启动目录 里面包含了一个启动文件 www 默认监听端口是 3000 (不用)</p>
</li>
<li><p>node_modules: 所有安装的依赖模块 都在这个文件夹里面</p>
</li>
<li><p>public: 所有的前端静态资源 html css image js</p>
</li>
<li><p>routes: 放的是 路由 文件 (默认有两个)路由主要定义 url 和 资源 的映射关系 ( 一一对应关系 )主要用来接收前端发送的请求 响应数据给前端</p>
</li>
<li><p>views: 主要放置 ejs 后端模板文件</p>
</li>
<li><p>app.js: 入口文件(主文件) 总路由 (其他的路由 要由它来分配)</p>
</li>
<li><p>package.json: 包描述文件 最重要的是 依赖的模板列表 dependencies</p>
</li>
</ul>
<h6 id="app-js文件"><a href="#app-js文件" class="headerlink" title="app.js文件"></a>app.js文件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);<span class="comment">//引入路由文件</span></span><br><span class="line"><span class="keyword">var</span> app = express(); <span class="comment">//创建服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置服务器模板渲染引擎</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">&#x27;dev&#x27;</span>)); <span class="comment">//设置日为开发者模式</span></span><br><span class="line"></span><br><span class="line">app.use(express.json()); <span class="comment">//让express处理 json 数据</span></span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">//用于接收 POSt 请求数据</span></span><br><span class="line"></span><br><span class="line">app.use(cookieParser()); <span class="comment">//处理 cookie 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源设置；__dirnam代表当前文件的路径</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>))); </span><br><span class="line"><span class="comment">//路由(API)</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br></pre></td></tr></table></figure>

<h5 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h5><h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm i mysql -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myConnection = mysql.createConnection(&#123;</span><br><span class="line">    host:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    user:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    database:<span class="string">&#x27;guoxinan&#x27;</span>,</span><br><span class="line">    port:<span class="number">3306</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">sql,option,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//打开连接</span></span><br><span class="line">    myConnection.connect();</span><br><span class="line">    <span class="comment">//sql操作</span></span><br><span class="line">    myConnection.query(sql,option,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;操作数据库失败&quot;</span>,err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;);</span><br><span class="line">    myConnection.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MYSQL：ER_NOT_SUPPORTED_AUTH_MODE:Client does not support authentication protocol</span><br></pre></td></tr></table></figure>

<p>原因:8.0mysql引入了caching_sha2_password模块作为默认身份验证插件，nodejs还没有跟进</p>
<p>解决办法:进入mysql修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;自己的密码&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h5><p>JS 是单线程运行的，只能执行完一个任务，然后再去执行下一个任务。</p>
<p>异步编程不进入主线程，而是进入任务队列，当满足触发条件之后，才可以在任务队列中执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; 宏任务</span><br><span class="line">宏任务优先级是低于微任务的，主要包含：script、setTimeout、setInterval 等</span><br><span class="line"></span><br><span class="line">&gt;&gt; 微任务</span><br><span class="line">包括 Promise 的 then 、process.nextTick 等。</span><br><span class="line"></span><br><span class="line">&gt;&gt; Event Loop 执行顺序：</span><br><span class="line">* 遇到同步代码，直接执行，</span><br><span class="line">* 遇到宏任务直接放到宏任务队列中，</span><br><span class="line">* 遇到 Promise 直接执行，然后遇到 then，放入微任务队列，</span><br><span class="line">* 本轮循环结束时，先查看微任务队列，执行所有的微任务，</span><br><span class="line">* 下一次环循时，先执行一个宏任务，</span><br><span class="line"></span><br><span class="line">注意：微任务是每次全部执行，宏任务是每次只执行一项。</span><br></pre></td></tr></table></figure>

<h5 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h5><p>ECMAscript 6 原生提供了 Promise 对象.属于异步编程的一种解决方案</p>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>
<h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ol>
<li>主要用于异步计算</li>
<li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</li>
<li>可以在对象之间传递和操作promise，帮助我们处理队列</li>
</ol>
<h6 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h6><ul>
<li>Pending Promise 对象创建时的初始状态</li>
<li>Fulfilled 成功状态</li>
<li>Rejected 失败状态</li>
</ul>
<h6 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                    <span class="function"><span class="title">if</span>(<span class="params">失败</span>)</span> &#123;</span><br><span class="line">                        reject();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="title">if</span>(<span class="params">成功</span>)</span> &#123;</span><br><span class="line">                        resolve()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">// 执行成功相应的代码</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">// 捕获错误</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h6 id="Promose-all"><a href="#Promose-all" class="headerlink" title="Promose.all()"></a>Promose.all()</h6><p>主要解决并发请求的问题,参数是一个数组,数组中每个元素都是promise,一个执行失败则全部失败,必须所有的执行成功才会成功.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">    .all([promise1,promise2,promise3])</span><br></pre></td></tr></table></figure>

<h6 id="async-await-终极解决方案"><a href="#async-await-终极解决方案" class="headerlink" title="async/await(终极解决方案)"></a>async/await(终极解决方案)</h6><p>基于promise的一个解决一部的方案</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123; <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([p1,p2,p3])</span><br><span class="line"> 		<span class="built_in">console</span>.log(result);<span class="comment">//promise1 promise2 promise3</span></span><br><span class="line">   &#125; <span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;执行失败&quot;</span>,err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="session设置"><a href="#session设置" class="headerlink" title="session设置"></a>session设置</h5><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i --save express-session cookie-parser</span></span><br></pre></td></tr></table></figure>

<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">&#x27;secret&#x27;</span>, <span class="comment">// 用于对 sessionID 进行签名</span></span><br><span class="line">  name: <span class="string">&#x27;myApp&#x27;</span>, <span class="comment">// 直接指定浏览器端生成的 cookie 的名字</span></span><br><span class="line">  cookie: &#123;</span><br><span class="line">    maxAge: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> <span class="comment">// 过期时间，毫秒</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// store: session // session 存储方式，默认存储在 内存中</span></span><br><span class="line">  saveUninitialized: <span class="literal">false</span>, <span class="comment">// 是否将未初始化的 session 进行存储</span></span><br><span class="line">  resave: <span class="literal">true</span>, <span class="comment">// 是否每次重新保存对话</span></span><br><span class="line">  rolling: <span class="literal">true</span> <span class="comment">// 在线时每隔一定时间去刷新 session</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由拦截</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pat = <span class="regexp">/\/pages\/login.html|\/users\/login|\.js$|\.css$|\.ico$/</span>;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!pat.test(req.url)</span>)</span> &#123; <span class="comment">// 判断需要权限的页面</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">req.session.sign</span>)</span> &#123; <span class="comment">// 是否已经登陆了</span></span><br><span class="line">      next(); <span class="comment">// 放行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.redirect(<span class="string">&#x27;/pages/login.html&#x27;</span>); <span class="comment">// 未登录重定向到登录页</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(); <span class="comment">// 放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="ejs-模板"><a href="#ejs-模板" class="headerlink" title="ejs 模板"></a>ejs 模板</h5><p>  &gt;&gt; 渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.render(模板引擎的文件名, 传递给模板引擎的参数);</span><br><span class="line"> res.render(<span class="string">&#x27;index&#x27;</span>, &#123; </span><br><span class="line">  title: <span class="string">&#x27;主页&#x27;</span>,</span><br><span class="line">  msg: <span class="string">&#x27;&lt;a href=&quot;&quot;&gt;您好&lt;/a&gt;&#x27;</span>,</span><br><span class="line">  user: &#123;</span><br><span class="line">   name: <span class="string">&#x27;fay&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  list: [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>]</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>* &lt;%= 变量名 %&gt; 用于显示 js 变量的，如果带有标签，则不会渲染标签</p>
   <p> <%= msg %> </p>

<p>  * &lt;%- 变量名 %&gt; 用于显示 js 变量，如果有标签，会将标签进行渲染</p>
   <p> <%- msg %> </p>

<p>  * &lt;% 表达式 %&gt; 用于执行 js 代码，而不是展示内容<br>   &lt;% if(user) { %&gt;</p>
<p>  &lt;%- include(‘header’) -%&gt;</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Session共享的实现</title>
    <url>/2020/12/01/Session%E5%85%B1%E4%BA%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h3><p> Session 共享是指在一个浏览器访问多个 Web 服务时，服务端的 Session 数据需要共享。</p>
<a id="more"></a>

<h4 id="cookie加密的方式保存在客户端"><a href="#cookie加密的方式保存在客户端" class="headerlink" title="cookie加密的方式保存在客户端"></a>cookie加密的方式保存在客户端</h4><ul>
<li><p>优点：减轻服务器端压力</p>
</li>
<li><p>缺点：受到cookie大小限制，因为每次请求会在头部附带cookie信息，占用一定的带宽。另外，这种方式在用户禁用cookie的情况下无效。这种方式不常用。</p>
</li>
</ul>
<h4 id="服务器间同步"><a href="#服务器间同步" class="headerlink" title="服务器间同步"></a>服务器间同步</h4><p>服务器间同步比如tomcat集群：通过配置tomcat，实现session共享。每个tomcat都会在局域网中广播自己的session信息，同时监听其他tomcat广播的session，一旦自己的session发生变化，其他的tomcat能够感知到的，同时就可以同步自己的session和它一样。</p>
<ul>
<li>缺点：当集群服务器数量比较大如200台，每一台服务器的tomcat都需要广播自己的session，同时监听另外199台，此时，服务器的大量资源都用来处理session同步的事情，用户正常的访问就会受到影响。要视部署的tomcat集群数量等来定是否使用这种方式。</li>
</ul>
<h4 id="基于分布式缓存"><a href="#基于分布式缓存" class="headerlink" title="基于分布式缓存"></a>基于分布式缓存</h4><p>基于分布式缓存的session共享机制</p>
<p>使用redis取代session保存用户信息，这种方式比较常用</p>
<h3 id="SpringSession"><a href="#SpringSession" class="headerlink" title="SpringSession"></a>SpringSession</h3><p>Spring Session 是 Spring 的项目之一。Spring Session 提供了一套创建和管理 Servlet HttpSession 的方案，默认采用外置的 Redis 来存储 Session 数据，以此来解决 Session 共享的 问题。</p>
<h4 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h4><p>SpringSession从底层全方位”接管”了Tomcat对Session的管理</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201201155030.png" alt="SpringSession基本实现原理"></p>
<h5 id="SessionRepositoryFilter"><a href="#SessionRepositoryFilter" class="headerlink" title="SessionRepositoryFilter"></a>SessionRepositoryFilter</h5><p>利用Filter原理,在每次请求到达目标方法之前,将原生HttpSetvletRequest / HttpSetvletResponse对象包装为SessionRepository / ResponseWrapper </p>
]]></content>
  </entry>
  <entry>
    <title>ab压力测试工具</title>
    <url>/2020/11/15/ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="AB工具简介"><a href="#AB工具简介" class="headerlink" title="AB工具简介"></a>AB工具简介</h4><p>ab全称为：apache bench</p>
<p>ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</p>
<a id="more"></a>

<p>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install httpd-tools</span></span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">请求数(测试会话中所执行的请求个数)</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">并发数(一次产生的请求个数</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="center">测试所进行的最大秒数</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">指定含有请求数据的文件</td>
</tr>
<tr>
<td align="center">-T</td>
<td align="center">请求数据所使用的Content-type头信息</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">……</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>git&amp;Linux基本命令</title>
    <url>/2020/11/07/git-Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git和Linux的一些基本命令操作</p>
<a id="more"></a>

<h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><h6 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff readme.txt </span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span>		$ git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 1094a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>



<h6 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://.....($ git remote add origin git@github.com:michaelliao/learngit.git)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin(远程仓库名) master(本地分支名) master(远程分支名)  (-u首次建立关联)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:michaelliao/gitskills.git</span></span><br><span class="line">git remote rm origin</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin  master(本地分支名) master(远程分支名)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream-to=origin/dev dev（绑定本地分支）</span></span><br></pre></td></tr></table></figure>

<h6 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev（$ git switch -c dev）===</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev（$ git switch master）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev（not merge  -D）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase（直线提交历史）</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git stash apply(恢复不删除)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2</span></span><br></pre></td></tr></table></figure>

<h6 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag v0.9 [f52c633]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [标签名]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show v0.9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d v0.9		删除标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin v1.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --tags	推送所有标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/v0.9</span></span><br></pre></td></tr></table></figure>

<h6 id="多关联"><a href="#多关联" class="headerlink" title="多关联"></a>多关联</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h6 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.co checkout</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.ci commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.br branch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><h6 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls: 列出目录	</span><br><span class="line">cd：切换目录	(Change Directory)</span><br><span class="line">pwd：显示目前的目录	(Print Working Directory)</span><br><span class="line">mkdir：创建一个新的目录	 (make directory)</span><br><span class="line">rmdir：删除一个空的目录</span><br><span class="line">cp: 复制文件或目录</span><br><span class="line">rm: 移除文件或目录</span><br><span class="line">mv: 移动文件与目录，或修改文件与目录的名称</span><br><span class="line">dhclient 自动分配地址[BOOTPROTO&#x3D;STATIC	ONBOOT&#x3D;YES	</span><br><span class="line">IPADDR&#x3D;192.168.XX.XXX	NETMASK&#x3D;255.255.255.0 	GATEWAY&#x3D;192.168.XX.X</span><br><span class="line">DNS1&#x3D;119.29.29.29]</span><br></pre></td></tr></table></figure>

<h6 id="用户-组管理"><a href="#用户-组管理" class="headerlink" title="用户/组管理"></a>用户/组管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd [user]	useradd [-g]  组名 [user]</span><br><span class="line">passwd [user] </span><br><span class="line">userdel [-r] [user]</span><br><span class="line">id [user]</span><br><span class="line">su [user]</span><br><span class="line"></span><br><span class="line">groupadd [group]</span><br><span class="line">groupdel [group]</span><br><span class="line">gpasswd  -d student root 将用户student从root组删除</span><br><span class="line">usermod [-g] 组名 [user]</span><br></pre></td></tr></table></figure>

<h6 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [dir] | grep [..]</span><br><span class="line">ls -l /home |grep &quot;!-&quot;|wc -l 查看某文件夹下文件的个数</span><br><span class="line">stat [file]</span><br><span class="line"></span><br><span class="line">[ls,cat,echo...] &gt;&gt;追加</span><br><span class="line">[ls,cat,echo...] &gt;覆盖</span><br><span class="line"></span><br><span class="line">head/tail -n [num] [file]     		tail -f [file]</span><br><span class="line"></span><br><span class="line">ln -s [dir] [name] </span><br><span class="line"></span><br><span class="line">date &quot;+%Y %M %D.....&quot;</span><br><span class="line">cal</span><br><span class="line"></span><br><span class="line">find [scope] -name [name]</span><br><span class="line">find [scope] -user [user]</span><br><span class="line">find [scope] -size  [+-n]</span><br><span class="line"></span><br><span class="line">tar -zcvf [name].tar.gz [files] 打包</span><br><span class="line">tar -zxvf [files] -C [dir] 解压</span><br><span class="line"></span><br><span class="line">rpm [-qa | -qi | qf]</span><br><span class="line">rpm -e [--nodeps(强删)] [name]</span><br><span class="line">rpm -ivh		i=install  v=verbose提示  h=hash进度条</span><br></pre></td></tr></table></figure>

<h6 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown/chgrp [user/group] [file]</span><br><span class="line">chmod u=[rwx],g=[rwx],o=[rwx] [file]</span><br><span class="line">chmod u[+-][rwx],g[+-][rwx],o[+-][rwx] [file]</span><br><span class="line">chomd [777] [file]     (4=r,2=w,1=x)</span><br></pre></td></tr></table></figure>

<h6 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab [-e -l -r]  ([写入 查看 删除])</span><br><span class="line">*/1 * * * * [执行文件/脚本] </span><br></pre></td></tr></table></figure>

<h6 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">du -axh	文件夹占用</span><br><span class="line">lsblk -f  	查看是否已分配</span><br><span class="line">fdisk /dev/dba	分区</span><br><span class="line">mkfs -t ext4 /dev/sdb1   格式化</span><br><span class="line">mount  /dev/sdb1   /home/newdisk	挂载</span><br><span class="line">/dev/fstab  设置开机自动挂载</span><br></pre></td></tr></table></figure>

<h6 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep ...</span><br><span class="line">ps -ef 		-e显示所有进程 -f全格式</span><br><span class="line">kill [-9] 进程号	-9强制</span><br><span class="line">killall 进程名称</span><br><span class="line">top [-d | -i | -p]	-d秒数 -i不显示闲置或僵死 -p指定进程id监控</span><br></pre></td></tr></table></figure>

<h6 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl [status | stop | start | restart | reload ]firewalld</span><br><span class="line">ll /etc/init.d/	</span><br><span class="line">netstat -anp 	-an按一定顺序 -p显示哪个在调用   查看网络服务</span><br></pre></td></tr></table></figure>

<h6 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h6><pre><code>  #!/bin/bash开头
  A=100;
  unset A ---&gt;A=
位置参数变量
$n    第n个参数
$*    整体
$@    分别
$#    参数个数
=====================</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">预定义变量</span><br><span class="line"><span class="meta">$</span><span class="bash">$	当前进程PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">!	后台运行最后一个PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">?	最后一次命名的返回状态 0√</span></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line">运算(2+3)*4</span><br><span class="line"><span class="meta">#</span><span class="bash">方式一$()</span></span><br><span class="line">RESULT1=$(((2+3)*4))</span><br><span class="line"><span class="meta">#</span><span class="bash">方式二$[]  推荐方式</span></span><br><span class="line">RESULT2=$[(2+3)*4]</span><br><span class="line"><span class="meta">#</span><span class="bash">方式三 expr</span></span><br><span class="line">................</span><br><span class="line">==========================</span><br><span class="line">条件判断</span><br><span class="line">if[ condition ] </span><br><span class="line">then</span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">elif[ condirion ] </span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">fi</span><br><span class="line"> -lt小于 -le小于等于  -gt大于 -ge大于等于  -eq等于 -ne不等于</span><br><span class="line">-r/-w/-x 有读/写/执行的权限</span><br><span class="line">-f文件存在并且时一个常规文件 -e文件存在 -d文件存在并是目录</span><br><span class="line">------------------------</span><br><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">echo&quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">echo&quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo&quot;other&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">循环</span><br><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">-------------------------</span><br><span class="line">for ((i=0;i&lt;100;i++))</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">--------------------------</span><br><span class="line">while[ condition ]</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">read读取控制台输入</span><br><span class="line">read -p  &quot;读取时的提示符&quot; -t指定读取时等待的时间(秒)	NUM</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">函数</span><br><span class="line">function getSum()&#123;</span><br><span class="line">	SUM=$[$n1+$n2]</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;输入n1&quot; n1</span><br><span class="line">read -p &quot;输入n2&quot; n2</span><br><span class="line"><span class="meta">#</span><span class="bash">调用</span></span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud-netflix使用</title>
    <url>/2020/11/23/spring-cloud-netflix%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h4><p>springCloud是基于SpringBoot的一整套实现微服务的框架。他提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等组件。</p>
<a id="more"></a>

<h4 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h4><p>Eureka: 服务注册和发现组件<br>Ribbon: 负载均衡<br>Feign: 远程接口的声明式调用<br>Hystrix: 服务的熔断,降级,监控<br><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201120150542.png"></p>
<h5 id="Eureka-注册"><a href="#Eureka-注册" class="headerlink" title="Eureka(注册)"></a>Eureka(注册)</h5><p>服务端配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>     <span class="comment">#配置当前Eureka服务的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#当前服务本身就是注册中心,不用注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>           <span class="comment">#不用从注册中心取回信息</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;/$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">//开启服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMainType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMainType.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>客户端配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:5000/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure>

<h5 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon(负载均衡)"></a>Ribbon(负载均衡)</h5><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//让RestTemplate具有负载均衡的功能,通过Ribbon访问provider集群</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Feign-声明式调用"><a href="#Feign-声明式调用" class="headerlink" title="Feign(声明式调用)"></a>Feign(声明式调用)</h5><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Feigin依赖有Ribbon, 不需要配置Ribbon</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201120150725105.png" alt="Feign(声明式调用)"></p>
<p>@FeignClient注解</p>
<p>value:</p>
<ul>
<li>表示当前接口和一个Provider对应,注解中value属性指定要用的Provider的微服务名称</li>
<li>要求@RequestMapping注解映射的地址一致</li>
<li>要求方法声明一致</li>
<li>用来获取请求参数的@RequstParam, @PathVariable, @RequestBody不能省略, 两边一致</li>
</ul>
<p>fallbackFactory:</p>
<ul>
<li>指定Provider不可用时提供的备用方案的工厂类型</li>
</ul>
<p>@EnableFeignClients</p>
<ul>
<li>启用Feign客户端功能</li>
</ul>
<h5 id="Hystrix-熔断-降级-监控"><a href="#Hystrix-熔断-降级-监控" class="headerlink" title="Hystrix(熔断,降级,监控)"></a>Hystrix(熔断,降级,监控)</h5><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="熔断-Provider"><a href="#熔断-Provider" class="headerlink" title="熔断(Provider)"></a>熔断(Provider)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定当前方法出问题时调用的方法</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;MethodName)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br></pre></td></tr></table></figure>

<h6 id="降级-Consumer"><a href="#降级-Consumer" class="headerlink" title="降级(Consumer)"></a>降级(Consumer)</h6><ul>
<li>实现Consumer端服务降级功能</li>
<li>实现FallbackFactory接口要传入@FeignClient标记的接口类型</li>
<li>在create()方法中返回@FeignClient注解标记的接口类型的对象,当Provider调用失败后,会执行这个对象对应的方法</li>
<li>使用@Component将当前对象加入IOC容器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">EmployeeRemoteService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmployeeRemoteService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmployeeRemoteService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            .....</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用</p>
<p>在Consumer的配置文件中启用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h6 id="监控-Provier"><a href="#监控-Provier" class="headerlink" title="监控(Provier)"></a>监控(Provier)</h6><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">hystrix.stream</span></span><br></pre></td></tr></table></figure>

<p>启动类上加@EnableHystrixDashboard注解启动仪表盘功能</p>
<h5 id="Zuul-网关"><a href="#Zuul-网关" class="headerlink" title="Zuul(网关)"></a>Zuul(网关)</h5><p>添加依赖并使用@EnableZuulProxy开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问: <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTp6dXVs56uv5Y+j">http://127.0.0.1:zuul端口<i class="fa fa-external-link-alt"></i></span> / 微服务名称 / 具体功能地址</p>
<p><strong>ZuulFilter过滤类</strong></p>
<p><code>shouldFilter</code>：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。</p>
<p><code>filterType</code>：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</p>
<ul>
<li><code>pre</code>：可以在请求被路由之前调用</li>
<li><code>route</code>：在路由请求时候被调用</li>
<li><code>post</code>：在route和error过滤器之后被调用</li>
<li><code>error</code>：处理请求时发生错误时被调用</li>
</ul>
<p><code>filterOrder</code>：通过int值来定义过滤器的执行顺序</p>
<p><code>run</code>：过滤器的具体实现功能。</p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h6 id="fallback-method-wasn’t-found"><a href="#fallback-method-wasn’t-found" class="headerlink" title="fallback method wasn’t found"></a>fallback method wasn’t found</h6><p> 备用方法 和 原方法 的参数类型，个数不同造成的</p>
<h6 id="Unable-to-connect-to-Command-Metric-Stream"><a href="#Unable-to-connect-to-Command-Metric-Stream" class="headerlink" title="Unable to connect to Command Metric Stream."></a>Unable to connect to Command Metric Stream.</h6><p>dashboard无法显示,控制台显示<span class="exturl" data-url="aHR0cDovL3h4eC54eHgueHg6eHh4L2h5c3RyaXguc3RyZWFt">http://xxx.xxx.xx:xxx/hystrix.stream<i class="fa fa-external-link-alt"></i></span> is not in the allowed list of proxy host names.  If it should be allowed add it to hystrix.dashboard.proxyStreamAllowList. </p>
<p>解决: 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;localhost&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SpringSecurity进行权限控制</title>
    <url>/2020/11/09/%E4%BD%BF%E7%94%A8SpringSecurity%E8%BF%9B%E8%A1%8C%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h3 id="spring-security-简介"><a href="#spring-security-简介" class="headerlink" title="spring security 简介"></a>spring security 简介</h3><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它是用于保护基于Spring的应用程序的实际标准。</p>
<p>Spring Security是一个框架，致力于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring Security的真正强大之处在于可以轻松扩展以满足自定义要求</p>
<a id="more"></a>

<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201109124625.png" alt="SpringSecurity的执行流程"></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201109163442.png"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置xml"><a href="#配置xml" class="headerlink" title="配置xml"></a>配置xml</h4><p>SpringSecurity使用的是过滤器Filter而不是拦截器Interceptor,意味着SpringSecurity能够管理的不仅仅是SpringMVC中的handler请求,还包含Web应用中的所有请求,包括静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFileterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFileterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>filter-name中的名字必须是springSecurityFileterChain才能加载到ioc容器中的Filter</p>
<h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringSecurity 对 Web 应用进行权限管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringSecurity 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringSecurity 标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>创建配置类,继承WebSecurityConfigurerAdapter 并重写configure方法,并加入到IOC容器(Spring ioc拦截Service和Mapper,SpringMvc ioc 拦截请求,加在Springmvc时会发生No bean named ‘springSecurityFilterChain’ available错误)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableWebMvcSecurity注解：在Spring 4.0中已弃用。</p>
<p>WebSecurityConfigurerAdapter类：可以通过重载该类的三个configure()方法来制定Web安全的细节。</p>
<h5 id="configure-WebSecurity-："><a href="#configure-WebSecurity-：" class="headerlink" title="configure(WebSecurity)："></a>configure(WebSecurity)：</h5><p>通过重载该方法，可配置Spring Security的Filter链。</p>
<h5 id="拦截配置-HttpSecurity-："><a href="#拦截配置-HttpSecurity-：" class="headerlink" title="拦截配置(HttpSecurity)："></a>拦截配置(HttpSecurity)：</h5><p>通过重载该方法，可配置如何通过拦截器保护请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()	<span class="comment">//对请求进行授权</span></span><br><span class="line">            <span class="comment">//访问&quot;/&quot;和&quot;/home&quot;路径的请求都允许</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            <span class="comment">//而其他的请求都需要认证</span></span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">//修改Spring Security默认的登陆界面</span></span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/to/login/page.html&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/do/login.html&quot;</span>)</span><br><span class="line">            .permitAll()			<span class="comment">//无条件访问</span></span><br><span class="line">            .antMathers(url)		<span class="comment">//对url设置访问要求</span></span><br><span class="line">            .hasRole()				<span class="comment">//要求用户具备的角色</span></span><br><span class="line">            .usernameParameter(<span class="string">&quot;loginAcct&quot;</span>)</span><br><span class="line">            .passwordParameter(<span class="string">&quot;userPwd&quot;</span>)</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/to/main/page.html&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .logout()	</span><br><span class="line">            .logoutUrl(<span class="string">&quot;/do/logout.html&quot;</span>)</span><br><span class="line">            .exceptionHandling()	<span class="comment">//指定异常处理器</span></span><br><span class="line"><span class="comment">//            .accessDeniedPage(&quot;/to/error/page.html&quot;)	//访问被拒时去的页面</span></span><br><span class="line">            .accessDeniedHandler(<span class="keyword">new</span> AccessDeniedHandler()) <span class="comment">//定制异常处理</span></span><br><span class="line">			.rememberMe()   <span class="comment">//默认参数remember-me(cookie)</span></span><br><span class="line">	</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>access(String)</td>
<td align="left">如果给定的SpEL表达式计算结果为true，就允许访问</td>
</tr>
<tr>
<td>anonymous()</td>
<td align="left">允许匿名用户访问</td>
</tr>
<tr>
<td>authenticated()</td>
<td align="left">允许认证过的用户访问</td>
</tr>
<tr>
<td>denyAll()</td>
<td align="left">无条件拒绝所有访问</td>
</tr>
<tr>
<td>fullyAuthenticated()</td>
<td align="left">如果用户是完整认证的话（不是通过Remember-me功能认证的），就允许访问</td>
</tr>
<tr>
<td>hasAnyAuthority(String…)</td>
<td align="left">如果用户具备给定权限中的某一个的话，就允许访问</td>
</tr>
<tr>
<td>hasAnyRole(String…)</td>
<td align="left">如果用户具备给定角色中的某一个的话，就允许访问</td>
</tr>
<tr>
<td><strong>hasAuthority(String)</strong></td>
<td align="left"><strong>如果用户具备给定权限的话，就允许访问</strong></td>
</tr>
<tr>
<td>hasIpAddress(String)</td>
<td align="left">如果请求来自给定IP地址的话，就允许访问</td>
</tr>
<tr>
<td><strong>hasRole(String)</strong></td>
<td align="left"><strong>如果用户具备给定角色的话，就允许访问</strong></td>
</tr>
<tr>
<td>not()</td>
<td align="left">对其他访问方法的结果求反</td>
</tr>
<tr>
<td>permitAll()</td>
<td align="left">无条件允许访问</td>
</tr>
<tr>
<td>rememberMe()</td>
<td align="left">如果用户是通过Remember-me功能认证的，就允许访问</td>
</tr>
<tr>
<td>usernameParameter()</td>
<td align="left">定制登录账号请求参数名</td>
</tr>
<tr>
<td>passwordParameter()</td>
<td align="left">定制登录密码请求参数名</td>
</tr>
<tr>
<td>defaultSuccessUrl()</td>
<td align="left">登录成功后去往的页面</td>
</tr>
<tr>
<td>loginProcessingUrl()</td>
<td align="left">登录放行</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>安全表达式</th>
<th>计算结果</th>
</tr>
</thead>
<tbody><tr>
<td>authentication</td>
<td>用户认证对象</td>
</tr>
<tr>
<td>denyAll</td>
<td>结果始终为false</td>
</tr>
<tr>
<td>hasAnyRole(list of roles)</td>
<td>如果用户被授权指定的任意权限，结果为true</td>
</tr>
<tr>
<td>hasRole(role)</td>
<td>如果用户被授予了指定的权限，结果 为true</td>
</tr>
<tr>
<td>hasIpAddress(IP Adress)</td>
<td>用户地址</td>
</tr>
<tr>
<td>isAnonymous()</td>
<td>是否为匿名用户</td>
</tr>
<tr>
<td>isAuthenticated()</td>
<td>不是匿名用户</td>
</tr>
<tr>
<td>isFullyAuthenticated</td>
<td>不是匿名也不是remember-me认证</td>
</tr>
<tr>
<td>isRemberMe()</td>
<td>remember-me认证</td>
</tr>
<tr>
<td>permitAll</td>
<td>始终true</td>
</tr>
<tr>
<td>principal</td>
<td>用户主要信息对象</td>
</tr>
</tbody></table>
<h5 id="用户权限配置-AuthenticationManagerBuilder-："><a href="#用户权限配置-AuthenticationManagerBuilder-：" class="headerlink" title="用户权限配置(AuthenticationManagerBuilder)："></a>用户权限配置(AuthenticationManagerBuilder)：</h5><p>通过重载该方法，可配置user-detail（用户详细信息）服务。 </p>
<h6 id="在内存中装配角色-权限信息"><a href="#在内存中装配角色-权限信息" class="headerlink" title="在内存中装配角色,权限信息"></a>在内存中装配角色,权限信息</h6><p>没有角色和权限的用户无法登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.inMemoryAuthentication()</span><br><span class="line">           .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">           .withUser(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">           .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">           .roles(<span class="string">&quot;ADMIN&quot;</span>)	<span class="comment">//设置角色</span></span><br><span class="line">           .and()</span><br><span class="line">           .withUser(<span class="string">&quot;qwe&quot;</span>)</span><br><span class="line">           .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">           .authorities(<span class="string">&quot;UPDATE&quot;</span>);	<span class="comment">//设置权限</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><em>注意:SpringSecurity会在角色字符串前面加”ROLE”前缀,从数据库查询得到的用户信息,角色信息,权限信息需要之际手动组装,组装时同样要在角色字符串前面加”ROLE_”</em></p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">accountExpired(boolean)</td>
<td align="left">定义账号是否已经过期</td>
</tr>
<tr>
<td align="left">accountLocked(boolean)</td>
<td align="left">定义账号是否已经锁定</td>
</tr>
<tr>
<td align="left">and()</td>
<td align="left">用来连接配置</td>
</tr>
<tr>
<td align="left">authorities(GrantedAuthority…)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">authorities(List)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">authorities(String…)</td>
<td align="left">授予某个用户一项或多项权限</td>
</tr>
<tr>
<td align="left">credentialsExpired(boolean)</td>
<td align="left">定义凭证是否已经过期</td>
</tr>
<tr>
<td align="left">disabled(boolean)</td>
<td align="left">定义账号是否已被禁用</td>
</tr>
<tr>
<td align="left">password(String)</td>
<td align="left">定义用户的密码</td>
</tr>
<tr>
<td align="left">roles(String…)</td>
<td align="left">授予某个用户一项或多项角色</td>
</tr>
<tr>
<td align="left">inMemoryAuthentication()</td>
<td align="left">在内存中完成账号密码检测</td>
</tr>
<tr>
<td align="left">withUser()</td>
<td align="left">定义账号</td>
</tr>
</tbody></table>
<h6 id="根据表单提交的用户名从数据库查询User对象-并装配角色-权限信息"><a href="#根据表单提交的用户名从数据库查询User对象-并装配角色-权限信息" class="headerlink" title="根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息"></a>根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息</h6><p>思路:</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110162503.png" alt="根据表单提交的用户名从数据库查询User对象,并装配角色,权限信息"></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110162818.png"></p>
<p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.数据库查询admin对象</span></span><br><span class="line">        Admin admin = AdminMapper.select....byName();</span><br><span class="line">        <span class="comment">//2.给admin设置角色权限信息</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;UPDATE&quot;</span>));</span><br><span class="line">        <span class="comment">//3.把admin对象和authorities封装到UserDetails中</span></span><br><span class="line">        String password = admin.getPassword();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,password,authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>	</span><br><span class="line">MyUserDetailsService myUserDetailsService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.userDetailsService(myUserDetailsService)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><em>SpringSecurity处理完登录操作之后把登录成功的User对象以principal(主体)属性名存入了UsernamePasswordAuthenticationToken对象</em></p>
<p>在页面使用时:</p>
<p>1.引入SpringSecurity标签库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">&quot;security&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;http://www.springframework.org/security/tags&quot;</span> %&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.获取(UsernamePasswordAuthenticationToken会擦除密码)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:authentication</span> <span class="attr">property</span>=<span class="string">&quot;principal.original.username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="使用注解配分角色-权限信息"><a href="#使用注解配分角色-权限信息" class="headerlink" title="使用注解配分角色,权限信息"></a>使用注解配分角色,权限信息</h6><p>1.在配置类启用全局方法权限控制,并设置prePostEnabled=true,保证@PreAuthority,@PostAuthority,@PreFilter,@PostFilter生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> configure........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在需要加权限验证的方法上加@PreAuthorize</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;name&#x27;)&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/role/get/role.json&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ResultEntity&lt;PageInfo&lt;Role&gt;&gt; getPageInfo() &#123;</span><br><span class="line">       .........</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h5><p>用来生成token防止跨站请求伪造,需要在表单添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者配置HttpSecurity禁用否则会发生403错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.csrf()</span><br><span class="line">	.disable();</span><br></pre></td></tr></table></figure>

<h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><p> 在configure(AuthenticationManagerBuilder auth) 中使用PasswordEncoder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>	</span><br><span class="line">MyUserDetailsService myUserDetailsService;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">getPasswordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.userDetailsService(myUserDetailsService)</span><br><span class="line">           .passwordEncoder(getPasswordEncoder());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>自定义加密方式可继承PasswordEncoder,重写encode(),matches()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密密码</span></span><br><span class="line">        <span class="keyword">return</span> MyEncoder(charSequence);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String encodedPassword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密明文密码</span></span><br><span class="line">        String formPassword = MyEncoder(charSequence);</span><br><span class="line">        <span class="comment">//数据库密码</span></span><br><span class="line">        String databasePassword = encodedPassword;</span><br><span class="line">        <span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">return</span> Objects.equals(formPassword,databasePassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="No-bean-named-‘springSecurityFilterChain’-available"><a href="#No-bean-named-‘springSecurityFilterChain’-available" class="headerlink" title="No bean named ‘springSecurityFilterChain’ available:"></a>No bean named ‘springSecurityFilterChain’ available:</h5><p>当SpringSecurity配置类添加到SpringMvc Ioc中时,会抛出找不到pspringSecurityFilterChain异常</p>
<h6 id="三大组件启动顺序"><a href="#三大组件启动顺序" class="headerlink" title="三大组件启动顺序:"></a>三大组件启动顺序:</h6><p>首先:ContextLoaderListener初始化,创建Spring的IOC容器</p>
<p>其次:DelegatingFilterProxy初始化,查找IOC容器,查找bean</p>
<p>最后:DispatherServlet初始化,创建SpringMVC的IOC容器</p>
<h6 id="Filter查找IOC容器然后找Bean的工作机制"><a href="#Filter查找IOC容器然后找Bean的工作机制" class="headerlink" title="Filter查找IOC容器然后找Bean的工作机制"></a>Filter查找IOC容器然后找Bean的工作机制</h6><p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201110111808.png"></p>
<h6 id="解决方案一-把两个ioc容器合二为一"><a href="#解决方案一-把两个ioc容器合二为一" class="headerlink" title="解决方案一:把两个ioc容器合二为一"></a>解决方案一:把两个ioc容器合二为一</h6><p>不使用ContextLoaderListener,让Dispater加载所有Spring配置文件,但是会破环现有程序结构</p>
<h6 id="解决方案二-改源码"><a href="#解决方案二-改源码" class="headerlink" title="解决方案二:改源码"></a>解决方案二:改源码</h6><p>修改DelegatingFilterProxy类的initFilterBean(),doFilter()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.delegateMonitor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If no target bean name specified, use filter name.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.targetBeanName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.targetBeanName = getFilterName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Fetch Spring root application context and initialize the delegate early,</span></span><br><span class="line">            <span class="comment">// if possible. If the root application context will be started after this</span></span><br><span class="line">            <span class="comment">// filter proxy, we&#x27;ll have to resort to lazy initialization.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*注释掉</span></span><br><span class="line"><span class="comment">                WebApplicationContext wac = findWebApplicationContext();</span></span><br><span class="line"><span class="comment">                if (wac != null) &#123;</span></span><br><span class="line"><span class="comment">                    this.delegate = initDelegate(wac);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">// Lazily initialize the delegate if necessary.</span></span><br><span class="line">	Filter delegateToUse = <span class="keyword">this</span>.delegate;</span><br><span class="line">	<span class="keyword">if</span> (delegateToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.delegateMonitor) &#123;</span><br><span class="line">			delegateToUse = <span class="keyword">this</span>.delegate;</span><br><span class="line">			<span class="keyword">if</span> (delegateToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">//把原来查找IOC容器的代码注释掉,按需要重新编写</span></span><br><span class="line">				<span class="comment">//WebApplicationContext wac = findWebApplicationContext();</span></span><br><span class="line">                   <span class="comment">//1.获取ServletContext对象</span></span><br><span class="line">                   ServletContext sc = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">                   <span class="comment">//2.拼接SpingMvc将Ioc容器存入ServletContext域的时候使用的属性名</span></span><br><span class="line">                   String servletName = <span class="string">&quot;springDispatherServlet&quot;</span>;</span><br><span class="line">                   String attrName = FrameworkServlet.SERVLET_CONTEXT_PREFIX+servletName;</span><br><span class="line">                   <span class="comment">//3.根据attrName从ServletCOntext域中获取IOC容器对象</span></span><br><span class="line">                   WebApplicationContext wac = (WebApplicationContext)sc.getAttribute(attrName)</span><br><span class="line">				<span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No WebApplicationContext found: &quot;</span> +</span><br><span class="line">							<span class="string">&quot;no ContextLoaderListener or DispatcherServlet registered?&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				delegateToUse = initDelegate(wac);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.delegate = delegateToUse;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Cannot-pass-a-pull-GrantedAuthorrity-collection"><a href="#Cannot-pass-a-pull-GrantedAuthorrity-collection" class="headerlink" title="Cannot pass a pull GrantedAuthorrity collection:"></a>Cannot pass a pull GrantedAuthorrity collection:</h5><p>没有设置roles()或者authorities方法导致的</p>
<h5 id="Spring-Security-登陆报错："><a href="#Spring-Security-登陆报错：" class="headerlink" title="Spring Security 登陆报错："></a>Spring Security 登陆报错：</h5><p>There is no PasswordEncoder mapped for the id “null”:</p>
<p>必须设置密码的加密方式</p>
<p>5.0以后对于密码的管理有些变化,现如今Spring Security中密码的存储格式是“{id}…………”。前面的id是加密方式，id可以是bcrypt、sha256等，后面跟着的是加密后的密码。也就是说，程序拿到传过来的密码的时候，会首先查找被“{”和“}”包括起来的id，来确定后面的密码是被怎么样加密的，如果找不到就认为id是null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth.passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">    .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123123&quot;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="PreAuthorize-无法拦截："><a href="#PreAuthorize-无法拦截：" class="headerlink" title="@PreAuthorize()无法拦截："></a>@PreAuthorize()无法拦截：</h5><p>在使用@PreAuthorize()做拦截时,如果同时也设置了@EnableGlobalMethodSecurity(prePostEnabled = true),还是无法拦截,可能时因为在扫描SpringSecurity时是使用Spring扫描,而拦截注解加在了请求上,将注解加在Service文件或者是Mapper文件即可,反之亦然</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
</search>
