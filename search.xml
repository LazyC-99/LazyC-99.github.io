<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客搭建与部署</title>
    <url>/2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Hexo博客搭建与部署"><a href="#Hexo博客搭建与部署" class="headerlink" title="Hexo博客搭建与部署"></a>Hexo博客搭建与部署</h2><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <span class="exturl" data-url="aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=">Markdown<i class="fa fa-external-link-alt"></i></span>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><ul>
<li><span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcv">Node.js<i class="fa fa-external-link-alt"></i></span> </li>
<li><span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tLw==">Git<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<p>安装好之后使用$ hexo -v可查看安装成功与否,具体查看<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install <span class="comment">#d安装依赖</span></span></span><br></pre></td></tr></table></figure>

<p>安装完成后博客文件放在source/_posts文件夹中</p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>hexo项目结构安装好后，_config.yml可配置相关内容,可以选择自己喜欢的主题，可到官网或者github下载<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">NexT主题官网文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>Hexo 提供了快速方便的一键部署功能</p>
<p>1.首先在github创建一个和你用户名相同的仓库，后面加上.github.io，也就是xxxx.github.io</p>
<p>2.安装 hexo-deployer-git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>

<p>3.修改配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git #仓库地址</span><br><span class="line">  branch: master #分支名</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<p>4.部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p>hexo部署到github上面的只是生成的静态文件,当换一台电脑时就无法更新博客了,所以在仓库中创建一个hexo分支来保存hexo的环境文件</p>
<p>1.xxx.github.io.git创建一个分支hexo,将此分支设置为默认分支</p>
<p>2.创建一个空文件夹将xxx.github.io.git通过git克隆到本地,然后将.git文件移动到hexo init 的文件下,此时相当于将hexo 文件夹与github上的hexo分支关联起来</p>
<p>3.执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;environment&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure>

<p>将远程hexo分支中的静态文件替换为当前目录下的环境文件(因为.gitignore文件中忽略了静态文件,所以上传上去的只是环境文件,不会包含静态文件)</p>
<p>4.每次更新文章过后使用hexo命名更新文章,使用git命令更新环境文件,在换电脑之后只需要从git克隆下就能继续更新博客了</p>
<h4 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h4><p>部署到git之后会发现访问会很慢,有时候甚至直接无法访问,所以再到gitee再部署一个,因为再github已经部署过一次了,所以再gitee可以直接把github导过来</p>
<p>1.gitee再新建仓库的时候一个从github导入仓库的选项,可以直接从github将部署好的文件直接导过来</p>
<p>2.导入过来之后将仓库名改为与用户名相同</p>
<p>3.与github不同,gitee需要自己手动开启Pages服务,在仓库的服务选项选择Gitee Pages,选择部署分支mater,点击部署,成功后上面会显示已开启 Gitee Pages 服务，网站地址:<span class="exturl" data-url="aHR0cHM6Ly94eHguZ2l0LmlvLw==">https://xxx.git.io<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153519.png"></p>
<p>4.更新文章之后,想在gitee也同步更新,可以点击仓库名旁边的箭头,可直接从github同步到gitee</p>
<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>Markdown文档中是能够存放图片路径显示图片的,上传到网络上之后可以使用图床实现,因为github访问困难,所以图床文件放在gitee</p>
<p>1.下载PicGo,安装gitee插件</p>
<p><img src="https://gitee.com/LazyC-99/blog-images/raw/master/img/20201108153403.png"></p>
<p>2.在gitee创建库并设置Gitee插件,然后就能直接上传图片到gitee里面,使用的时候直接用图片的网络地址</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习</title>
    <url>/2020/11/06/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>web服务: express, koa, hapi<br>模板引擎: handlebars, ejs, jade<br>前端打包: webpak, fis,<br>任务管理: gulp<br>单元测试: karma, mocha, jasmine<br>包管理器: npm, cnpm, yarn<br>守护进程: pm2</p>
<a id="more"></a>

<h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm init </span><br></pre></td></tr></table></figure>

<h6 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装但不写入package.json； </span></span><br><span class="line"><span class="variable">$</span> npm install xxx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;dependencies&quot;中；</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –S </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装并写入package.json的&quot;evDependencies&quot;中;</span></span><br><span class="line"><span class="variable">$</span> npm install xxx –D</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>S（等同于–save）表示项目打包时会将该依赖包一并打包；-D（等同于–save-dev）表示该依赖包仅在开发环境下使用，正式打包不会加到项目中。</p>
<h5 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h5><h6 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npx express<span class="literal">-generator</span> -<span class="literal">-view</span>=ejs 项目名字</span><br></pre></td></tr></table></figure>

<h6 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> nmp i</span><br></pre></td></tr></table></figure>

<h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><ul>
<li><p>bin: 启动目录 里面包含了一个启动文件 www 默认监听端口是 3000 (不用)</p>
</li>
<li><p>node_modules: 所有安装的依赖模块 都在这个文件夹里面</p>
</li>
<li><p>public: 所有的前端静态资源 html css image js</p>
</li>
<li><p>routes: 放的是 路由 文件 (默认有两个)路由主要定义 url 和 资源 的映射关系 ( 一一对应关系 )主要用来接收前端发送的请求 响应数据给前端</p>
</li>
<li><p>views: 主要放置 ejs 后端模板文件</p>
</li>
<li><p>app.js: 入口文件(主文件) 总路由 (其他的路由 要由它来分配)</p>
</li>
<li><p>package.json: 包描述文件 最重要的是 依赖的模板列表 dependencies</p>
</li>
</ul>
<h6 id="app-js文件"><a href="#app-js文件" class="headerlink" title="app.js文件"></a>app.js文件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);<span class="comment">//引入路由文件</span></span><br><span class="line"><span class="keyword">var</span> app = express(); <span class="comment">//创建服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置服务器模板渲染引擎</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">&#x27;dev&#x27;</span>)); <span class="comment">//设置日为开发者模式</span></span><br><span class="line"></span><br><span class="line">app.use(express.json()); <span class="comment">//让express处理 json 数据</span></span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">//用于接收 POSt 请求数据</span></span><br><span class="line"></span><br><span class="line">app.use(cookieParser()); <span class="comment">//处理 cookie 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源设置；__dirnam代表当前文件的路径</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>))); </span><br><span class="line"><span class="comment">//路由(API)</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br></pre></td></tr></table></figure>

<h5 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h5><h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm i mysql -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myConnection = mysql.createConnection(&#123;</span><br><span class="line">    host:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    user:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    database:<span class="string">&#x27;guoxinan&#x27;</span>,</span><br><span class="line">    port:<span class="number">3306</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">sql,option,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//打开连接</span></span><br><span class="line">    myConnection.connect();</span><br><span class="line">    <span class="comment">//sql操作</span></span><br><span class="line">    myConnection.query(sql,option,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;操作数据库失败&quot;</span>,err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;);</span><br><span class="line">    myConnection.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MYSQL：ER_NOT_SUPPORTED_AUTH_MODE:Client does not support authentication protocol</span><br></pre></td></tr></table></figure>

<p>原因:8.0mysql引入了caching_sha2_password模块作为默认身份验证插件，nodejs还没有跟进</p>
<p>解决办法:进入mysql修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;自己的密码&#39;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>git&amp;Linux基本命令</title>
    <url>/2020/11/07/git-Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git和Linux的一些基本命令操作</p>
<a id="more"></a>

<h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><h6 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff readme.txt </span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span>		$ git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 1094a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>



<h6 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://.....($ git remote add origin git@github.com:michaelliao/learngit.git)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin(远程仓库名) master(本地分支名) master(远程分支名)  (-u首次建立关联)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:michaelliao/gitskills.git</span></span><br><span class="line">git remote rm origin</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin  master(本地分支名) master(远程分支名)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream-to=origin/dev dev（绑定本地分支）</span></span><br></pre></td></tr></table></figure>

<h6 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev（$ git switch -c dev）===</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev（$ git switch master）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev（not merge  -D）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase（直线提交历史）</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git stash apply(恢复不删除)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2</span></span><br></pre></td></tr></table></figure>

<h6 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag v0.9 [f52c633]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [标签名]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show v0.9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d v0.9		删除标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin v1.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --tags	推送所有标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/v0.9</span></span><br></pre></td></tr></table></figure>

<h6 id="多关联"><a href="#多关联" class="headerlink" title="多关联"></a>多关联</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h6 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.co checkout</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.ci commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.br branch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><h6 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls: 列出目录	</span><br><span class="line">cd：切换目录	(Change Directory)</span><br><span class="line">pwd：显示目前的目录	(Print Working Directory)</span><br><span class="line">mkdir：创建一个新的目录	 (make directory)</span><br><span class="line">rmdir：删除一个空的目录</span><br><span class="line">cp: 复制文件或目录</span><br><span class="line">rm: 移除文件或目录</span><br><span class="line">mv: 移动文件与目录，或修改文件与目录的名称</span><br><span class="line">dhclient 自动分配地址[BOOTPROTO&#x3D;STATIC	ONBOOT&#x3D;YES	</span><br><span class="line">IPADDR&#x3D;192.168.XX.XXX	NETMASK&#x3D;255.255.255.0 	GATEWAY&#x3D;192.168.XX.X</span><br><span class="line">DNS1&#x3D;119.29.29.29]</span><br></pre></td></tr></table></figure>

<h6 id="用户-组管理"><a href="#用户-组管理" class="headerlink" title="用户/组管理"></a>用户/组管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd [user]	useradd [-g]  组名 [user]</span><br><span class="line">passwd [user] </span><br><span class="line">userdel [-r] [user]</span><br><span class="line">id [user]</span><br><span class="line">su [user]</span><br><span class="line"></span><br><span class="line">groupadd [group]</span><br><span class="line">groupdel [group]</span><br><span class="line">gpasswd  -d student root 将用户student从root组删除</span><br><span class="line">usermod [-g] 组名 [user]</span><br></pre></td></tr></table></figure>

<h6 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [dir] | grep [..]</span><br><span class="line">ls -l /home |grep &quot;!-&quot;|wc -l 查看某文件夹下文件的个数</span><br><span class="line">stat [file]</span><br><span class="line"></span><br><span class="line">[ls,cat,echo...] &gt;&gt;追加</span><br><span class="line">[ls,cat,echo...] &gt;覆盖</span><br><span class="line"></span><br><span class="line">head/tail -n [num] [file]     		tail -f [file]</span><br><span class="line"></span><br><span class="line">ln -s [dir] [name] </span><br><span class="line"></span><br><span class="line">date &quot;+%Y %M %D.....&quot;</span><br><span class="line">cal</span><br><span class="line"></span><br><span class="line">find [scope] -name [name]</span><br><span class="line">find [scope] -user [user]</span><br><span class="line">find [scope] -size  [+-n]</span><br><span class="line"></span><br><span class="line">tar -zcvf [name].tar.gz [files] 打包</span><br><span class="line">tar -zxvf [files] -C [dir] 解压</span><br><span class="line"></span><br><span class="line">rpm [-qa | -qi | qf]</span><br><span class="line">rpm -e [--nodeps(强删)] [name]</span><br><span class="line">rpm -ivh		i=install  v=verbose提示  h=hash进度条</span><br></pre></td></tr></table></figure>

<h6 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown/chgrp [user/group] [file]</span><br><span class="line">chmod u=[rwx],g=[rwx],o=[rwx] [file]</span><br><span class="line">chmod u[+-][rwx],g[+-][rwx],o[+-][rwx] [file]</span><br><span class="line">chomd [777] [file]     (4=r,2=w,1=x)</span><br></pre></td></tr></table></figure>

<h6 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab [-e -l -r]  ([写入 查看 删除])</span><br><span class="line">*/1 * * * * [执行文件/脚本] </span><br></pre></td></tr></table></figure>

<h6 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">du -axh	文件夹占用</span><br><span class="line">lsblk -f  	查看是否已分配</span><br><span class="line">fdisk /dev/dba	分区</span><br><span class="line">mkfs -t ext4 /dev/sdb1   格式化</span><br><span class="line">mount  /dev/sdb1   /home/newdisk	挂载</span><br><span class="line">/dev/fstab  设置开机自动挂载</span><br></pre></td></tr></table></figure>

<h6 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep ...</span><br><span class="line">ps -ef 		-e显示所有进程 -f全格式</span><br><span class="line">kill [-9] 进程号	-9强制</span><br><span class="line">killall 进程名称</span><br><span class="line">top [-d | -i | -p]	-d秒数 -i不显示闲置或僵死 -p指定进程id监控</span><br></pre></td></tr></table></figure>

<h6 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl [status | stop | start | restart | reload ]firewalld</span><br><span class="line">ll /etc/init.d/	</span><br><span class="line">netstat -anp 	-an按一定顺序 -p显示哪个在调用   查看网络服务</span><br></pre></td></tr></table></figure>

<h6 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h6><pre><code>  #!/bin/bash开头
  A=100;
  unset A ---&gt;A=
位置参数变量
$n    第n个参数
$*    整体
$@    分别
$#    参数个数
=====================</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">预定义变量</span><br><span class="line"><span class="meta">$</span><span class="bash">$	当前进程PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">!	后台运行最后一个PID</span></span><br><span class="line"><span class="meta">$</span><span class="bash">?	最后一次命名的返回状态 0√</span></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line">运算(2+3)*4</span><br><span class="line"><span class="meta">#</span><span class="bash">方式一$()</span></span><br><span class="line">RESULT1=$(((2+3)*4))</span><br><span class="line"><span class="meta">#</span><span class="bash">方式二$[]  推荐方式</span></span><br><span class="line">RESULT2=$[(2+3)*4]</span><br><span class="line"><span class="meta">#</span><span class="bash">方式三 expr</span></span><br><span class="line">................</span><br><span class="line">==========================</span><br><span class="line">条件判断</span><br><span class="line">if[ condition ] </span><br><span class="line">then</span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">elif[ condirion ] </span><br><span class="line">	echo&quot;&quot;</span><br><span class="line">fi</span><br><span class="line"> -lt小于 -le小于等于  -gt大于 -ge大于等于  -eq等于 -ne不等于</span><br><span class="line">-r/-w/-x 有读/写/执行的权限</span><br><span class="line">-f文件存在并且时一个常规文件 -e文件存在 -d文件存在并是目录</span><br><span class="line">------------------------</span><br><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">echo&quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">echo&quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo&quot;other&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">循环</span><br><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">-------------------------</span><br><span class="line">for ((i=0;i&lt;100;i++))</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">--------------------------</span><br><span class="line">while[ condition ]</span><br><span class="line">do</span><br><span class="line">	程序</span><br><span class="line">done </span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">read读取控制台输入</span><br><span class="line">read -p  &quot;读取时的提示符&quot; -t指定读取时等待的时间(秒)	NUM</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">函数</span><br><span class="line">function getSum()&#123;</span><br><span class="line">	SUM=$[$n1+$n2]</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;输入n1&quot; n1</span><br><span class="line">read -p &quot;输入n2&quot; n2</span><br><span class="line"><span class="meta">#</span><span class="bash">调用</span></span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
